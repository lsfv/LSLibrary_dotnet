<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LSLibrary</name>
    </assembly>
    <members>
        <member name="T:LSLibrary.JetAccessUtil">
            <summary>
            Access数据库文件操作辅助类
            </summary>
        </member>
        <member name="M:LSLibrary.JetAccessUtil.CreateMDB(System.String,System.String)">
            <summary>
            新建带密码的空Access 2000 数据库
            </summary>
            <param name="mdbFilePath">数据库文件路径</param>
            <param name="password">数据库密码</param>
            <returns>字符0为操作成功，否则为失败异常消息。</returns>
        </member>
        <member name="M:LSLibrary.JetAccessUtil.CreateMDB(System.String)">
            <summary>
            新建空的Access数据库
            </summary>
            <param name="mdbFilePath">数据库文件路径</param>
            <returns>字符0为操作成功，否则为失败异常消息。</returns>
        </member>
        <member name="M:LSLibrary.JetAccessUtil.CompactMDB(System.String,System.String)">
            <summary>
            压缩带密码Access数据库
            </summary>
            <param name="mdbFilePath">数据库文件路径</param>
            <param name="password">数据库密码</param>
            <returns>字符0为操作成功，否则为失败异常消息。</returns>
        </member>
        <member name="M:LSLibrary.JetAccessUtil.CompactMDB(System.String)">
            <summary>
            压缩没有带密码Access数据库
            </summary>
            <param name="mdbFilePath">数据库文件路径</param>
            <returns>字符0为操作成功，否则为失败异常消息。</returns>
        </member>
        <member name="M:LSLibrary.JetAccessUtil.SetMDBPassword(System.String,System.String,System.String)">
            <summary>
            设置Access数据库的访问密码
            </summary>
            <param name="mdbFilePath">数据库文件路径</param>
            <param name="oldPwd">旧密码</param>
            <param name="newPwd">新密码</param>
            <returns>字符0为操作成功，否则为失败异常消息。</returns>
        </member>
        <member name="M:LSLibrary.JetAccessUtil.ListTables(System.String,System.String)">
            <summary>
            列出Access 2000 数据库的表名称
            </summary>
            <param name="mdbFilePath">数据库文件路径</param>
            <param name="password">数据库密码</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.JetAccessUtil.ListColumns(System.String,System.String,System.String)">
            <summary>
            列出Access2000数据库的表字段
            </summary>
            <param name="mdbFilePath">数据库文件路径</param>
            <param name="password">数据库密码</param>
            <param name="tableName">表名称</param>
            <returns>返回字段名称和对应类型的字典数据</returns>
        </member>
        <member name="T:LSLibrary.OleDbHelper">
            <summary>
            常用的Access数据库Sql操作辅助类库
            </summary>
        </member>
        <member name="M:LSLibrary.OleDbHelper.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="accessFilePath"></param>
        </member>
        <member name="M:LSLibrary.OleDbHelper.TestConnection">
            <summary>
            测试数据库是否正常连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.OleDbHelper.ExecuteNonQuery(System.Collections.Generic.List{System.String})">
            <summary>
            执行Sql，并返回成功的数量
            </summary>
            <param name="sqlList">待执行的Sql列表</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.OleDbHelper.ExecuteNoQuery(System.String)">
            <summary>
            执行无返回值的语句，成功返回True，否则False
            </summary>
            <param name="sql">待执行的Sql</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.OleDbHelper.ExecuteScalar(System.String)">
            <summary>
            执行单返回值的语句
            </summary>
            <param name="sql">待执行的Sql</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.OleDbHelper.ExecuteReader(System.String)">
            <summary>
            执行Sql，并返回IDataReader对象。
            </summary>
            <param name="sql">待执行的Sql</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.OleDbHelper.ExecuteDataSet(System.String)">
            <summary>
            执行Sql并返回DataSet集合
            </summary>
            <param name="sql">待执行的Sql</param>
            <returns></returns>
        </member>
        <member name="T:LSLibrary.PagerHelper">
            <summary> 
            根据各种不同数据库生成不同分页语句的辅助类 PagerHelper
            </summary> 
        </member>
        <member name="P:LSLibrary.PagerHelper.TableName">
            <summary>
            待查询表或自定义查询语句
            </summary>
        </member>
        <member name="P:LSLibrary.PagerHelper.FieldsToReturn">
            <summary>
            需要返回的列
            </summary>
        </member>
        <member name="P:LSLibrary.PagerHelper.FieldNameToSort">
            <summary>
            排序字段名称
            </summary>
        </member>
        <member name="P:LSLibrary.PagerHelper.PageSize">
            <summary>
            页尺寸,就是一页显示多少条记录
            </summary>
        </member>
        <member name="P:LSLibrary.PagerHelper.PageIndex">
            <summary>
            当前的页码
            </summary>
        </member>
        <member name="P:LSLibrary.PagerHelper.IsDescending">
            <summary>
            是否以降序排列结果
            </summary>
        </member>
        <member name="P:LSLibrary.PagerHelper.StrWhere">
            <summary>
            检索条件(注意: 不要加 where)
            </summary>
        </member>
        <member name="P:LSLibrary.PagerHelper.TableOrSqlWrapper">
            <summary>
            表或Sql语句包装属性
            </summary>
        </member>
        <member name="M:LSLibrary.PagerHelper.#ctor">
            <summary>
            默认构造函数，其他通过属性设置
            </summary>
        </member>
        <member name="M:LSLibrary.PagerHelper.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            完整的构造函数,可以包含条件,返回记录字段等条件
            </summary>
            <param name="tableName">自定义查询语句</param>
            <param name="fieldsToReturn">需要返回的列</param>
            <param name="fieldNameToSort">排序字段名称</param>
            <param name="pageSize">页尺寸</param>
            <param name="pageIndex">当前的页码</param>
            <param name="isDescending">是否以降序排列</param>
            <param name="strwhere">检索条件</param>
            <param name="connectionString">连接字符串</param>
        </member>
        <member name="M:LSLibrary.PagerHelper.GetOracleSql(System.Boolean)">
            <summary>
            不依赖于存储过程的分页(Oracle)
            </summary>
            <param name="isDoCount">如果isDoCount为True，返回总数统计Sql；否则返回分页语句Sql</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.PagerHelper.GetSqlServerSql(System.Boolean)">
            <summary>
            不依赖于存储过程的分页(SqlServer)
            </summary>
            <param name="isDoCount">如果isDoCount为True，返回总数统计Sql；否则返回分页语句Sql</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.PagerHelper.GetAccessSql(System.Boolean)">
            <summary>
            不依赖于存储过程的分页(Access)
            </summary>
            <param name="isDoCount">如果isDoCount为True，返回总数统计Sql；否则返回分页语句Sql</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.PagerHelper.GetMySqlSql(System.Boolean)">
            <summary>
            不依赖于存储过程的分页(MySql)
            </summary>
            <param name="isDoCount">如果isDoCount为True，返回总数统计Sql；否则返回分页语句Sql</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.PagerHelper.GetPagingSql(LSLibrary.DatabaseType,System.Boolean)">
            <summary>
            获取对应数据库的分页语句
            </summary>
            <param name="dbType">数据库类型枚举</param>
            <param name="isDoCount">如果isDoCount为True，返回总数统计Sql；否则返回分页语句Sql</param>
        </member>
        <member name="T:LSLibrary.SearchCondition">
            <summary>
            查询条件组合辅助类
            </summary>
        </member>
        <member name="P:LSLibrary.SearchCondition.ConditionTable">
            <summary>
            查询条件列表
            </summary>
        </member>
        <member name="M:LSLibrary.SearchCondition.AddCondition(System.String,System.Object,LSLibrary.SqlOperator)">
            <summary>
            为查询添加条件
            <example>
            用法一：
            SearchCondition searchObj = new SearchCondition();
            searchObj.AddCondition("Test", 1, SqlOperator.NotEqual);
            searchObj.AddCondition("Test2", "Test2Value", SqlOperator.Like);
            string conditionSql = searchObj.BuildConditionSql();
            
            用法二：AddCondition函数可以串起来添加多个条件
            SearchCondition searchObj = new SearchCondition();
            searchObj.AddCondition("Test", 1, SqlOperator.NotEqual).AddCondition("Test2", "Test2Value", SqlOperator.Like);
            string conditionSql = searchObj.BuildConditionSql();
            </example>
            </summary>
            <param name="fielName">字段名称</param>
            <param name="fieldValue">字段值</param>
            <param name="sqlOperator">SqlOperator枚举类型</param>
            <returns>增加条件后的Hashtable</returns>
        </member>
        <member name="M:LSLibrary.SearchCondition.AddCondition(System.String,System.Object,LSLibrary.SqlOperator,System.Boolean)">
            <summary>
            为查询添加条件
            <example>
            用法一：
            SearchCondition searchObj = new SearchCondition();
            searchObj.AddCondition("Test", 1, SqlOperator.NotEqual, false);
            searchObj.AddCondition("Test2", "Test2Value", SqlOperator.Like, true);
            string conditionSql = searchObj.BuildConditionSql();
            
            用法二：AddCondition函数可以串起来添加多个条件
            SearchCondition searchObj = new SearchCondition();
            searchObj.AddCondition("Test", 1, SqlOperator.NotEqual, false).AddCondition("Test2", "Test2Value", SqlOperator.Like, true);
            string conditionSql = searchObj.BuildConditionSql();
            </example>
            </summary>
            <param name="fielName">字段名称</param>
            <param name="fieldValue">字段值</param>
            <param name="sqlOperator">SqlOperator枚举类型</param>
            <param name="excludeIfEmpty">如果字段为空或者Null则不作为查询条件</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.SearchCondition.AddCondition(System.String,System.Object,LSLibrary.SqlOperator,System.Boolean,System.String)">
            <summary>
            将多个条件分组归类作为一个条件来查询，
            如需构造一个括号内的条件 ( Test = "AA1" OR Test = "AA2")
            </summary>
            <param name="fielName">字段名称</param>
            <param name="fieldValue">字段值</param>
            <param name="sqlOperator">SqlOperator枚举类型</param>
            <param name="excludeIfEmpty">如果字段为空或者Null则不作为查询条件</param>
            <param name="groupName">分组的名称，如需构造一个括号内的条件 ( Test = "AA1" OR Test = "AA2"), 定义一个组名集中条件</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.SearchCondition.BuildConditionSql(LSLibrary.DatabaseType)">
            <summary>
            根据对象构造相关的条件语句（不使用参数），如返回的语句是:
            <![CDATA[
            Where (1=1)  AND Test4  <  'Value4' AND Test6  >=  'Value6' AND Test7  <=  'value7' AND Test  <>  '1' AND Test5  >  'Value5' AND Test2  Like  '%Value2%' AND Test3  =  'Value3'
            ]]>
            </summary>
            <returns></returns> 
        </member>
        <member name="M:LSLibrary.SearchCondition.BuildGroupCondiction(LSLibrary.DatabaseType)">
            <summary>
            建立分组条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.SearchCondition.GetGroupNames">
            <summary>
            获取给定条件集合的组别对象集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.SearchCondition.ConvertSqlOperator(LSLibrary.SqlOperator)">
            <summary>
            转换枚举类型为对应的Sql语句操作符号
            </summary>
            <param name="sqlOperator">SqlOperator枚举对象</param>
            <returns><![CDATA[对应的Sql语句操作符号（如 ">" "<>" ">=")]]></returns>
        </member>
        <member name="M:LSLibrary.SearchCondition.GetFieldDbType(System.Object)">
            <summary>
            根据传入对象的值类型获取其对应的DbType类型
            </summary>
            <param name="fieldValue">对象的值</param>
            <returns>DbType类型</returns>
        </member>
        <member name="M:LSLibrary.SearchCondition.IsDate(System.String)">
            <summary>
            判断输入的字符是否为日期
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.SearchCondition.IsDateHourMinute(System.String)">
            <summary>
            判断输入的字符是否为日期,如2004-07-12 14:25|||1900-01-01 00:00|||9999-12-31 23:59
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="T:LSLibrary.SearchInfo">
            <summary>
            查询信息实体类
            </summary>
        </member>
        <member name="M:LSLibrary.SearchInfo.#ctor(System.String,System.Object,LSLibrary.SqlOperator)">
            <summary>
            构造函数
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="sqlOperator">字段的Sql操作符号</param>
        </member>
        <member name="M:LSLibrary.SearchInfo.#ctor(System.String,System.Object,LSLibrary.SqlOperator,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="sqlOperator">字段的Sql操作符号</param>
            <param name="excludeIfEmpty">如果字段为空或者Null则不作为查询条件</param>
        </member>
        <member name="M:LSLibrary.SearchInfo.#ctor(System.String,System.Object,LSLibrary.SqlOperator,System.Boolean,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="sqlOperator">字段的Sql操作符号</param>
            <param name="excludeIfEmpty">如果字段为空或者Null则不作为查询条件</param>
            <param name="groupName">分组的名称，如需构造一个括号内的条件 ( Test = "AA1" OR Test = "AA2"), 定义一个组名集中条件</param>
        </member>
        <member name="P:LSLibrary.SearchInfo.GroupName">
            <summary>
            分组的名称，如需构造一个括号内的条件 ( Test = "AA1" OR Test = "AA2"), 定义一个组名集中条件
            </summary>
        </member>
        <member name="P:LSLibrary.SearchInfo.FieldName">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:LSLibrary.SearchInfo.FieldValue">
            <summary>
            字段的值
            </summary>
        </member>
        <member name="P:LSLibrary.SearchInfo.SqlOperator">
            <summary>
            字段的Sql操作符号
            </summary>
        </member>
        <member name="P:LSLibrary.SearchInfo.ExcludeIfEmpty">
            <summary>
            如果字段为空或者Null则不作为查询条件
            </summary>
        </member>
        <member name="T:LSLibrary.SqlOperator">
            <summary>
            Sql的查询符号
            </summary>
        </member>
        <member name="F:LSLibrary.SqlOperator.Like">
            <summary>
            Like 模糊查询
            </summary>
        </member>
        <member name="F:LSLibrary.SqlOperator.NotLike">
            <summary>
            Not LiKE 模糊查询
            </summary>
        </member>
        <member name="F:LSLibrary.SqlOperator.LikeStartAt">
            <summary>
            Like 开始匹配模糊查询，如Like 'ABC%'
            </summary>
        </member>
        <member name="F:LSLibrary.SqlOperator.Equal">
            <summary>
            ＝ is equal to 等于号 
            </summary>
        </member>
        <!-- 对于成员“F:LSLibrary.SqlOperator.NotEqual”忽略有格式错误的 XML 注释 -->
        <member name="F:LSLibrary.SqlOperator.MoreThan">
            <summary>
            ＞ is more than 大于号
            </summary>
        </member>
        <member name="F:LSLibrary.SqlOperator.LessThan">
            <summary>
            ＜ is less than 小于号 
            </summary>
        </member>
        <member name="F:LSLibrary.SqlOperator.MoreThanOrEqual">
            <summary>
            ≥ is more than or equal to 大于或等于号 
            </summary>
        </member>
        <member name="F:LSLibrary.SqlOperator.LessThanOrEqual">
            <summary>
            ≤ is less than or equal to 小于或等于号
            </summary>
        </member>
        <member name="F:LSLibrary.SqlOperator.In">
            <summary>
            在某个字符串值中
            </summary>
        </member>
        <member name="T:LSLibrary.SmartDataReader">
            <summary>
            转换IDataReader字段对象的格式辅助类
            可以转换有默认值、可空类型的字段数据
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.#ctor(System.Data.IDataReader)">
            <summary>
            构造函数，传入IDataReader对象
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:LSLibrary.SmartDataReader.Read">
            <summary>
            继续读取下一个操作
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetInt32(System.String)">
            <summary>
            转换为Int类型数据
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetInt32(System.String,System.Int32)">
            <summary>
            转换为Int类型数据
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetInt32Nullable(System.String)">
            <summary>
            转换为Int类型数据
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetInt16(System.String)">
            <summary>
            转换为Int16类型数据
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetInt16(System.String,System.Int16)">
            <summary>
            转换为Int16类型数据
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetInt16Nullable(System.String)">
            <summary>
            转换为Int16类型数据
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetFloat(System.String)">
            <summary>
            转换为Float类型数据
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetFloat(System.String,System.Single)">
            <summary>
            转换为Float类型数据
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetFloatNullable(System.String)">
            <summary>
            转换为Float类型数据
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetDouble(System.String)">
            <summary>
            转换为Double类型数据
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetDouble(System.String,System.Double)">
            <summary>
            转换为Double类型数据
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetDoubleNullable(System.String)">
            <summary>
            转换为Double类型数据(可空类型）
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetDecimal(System.String)">
            <summary>
            转换为Decimal类型数据
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetDecimal(System.String,System.Decimal)">
            <summary>
            转换为Decimal类型数据
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetDecimalNullable(System.String)">
            <summary>
            转换为Decimal类型数据(可空类型）
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetSingle(System.String)">
            <summary>
            转换为Single类型数据
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetSingle(System.String,System.Single)">
            <summary>
            转换为Single类型数据
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetSingleNullable(System.String)">
            <summary>
            转换为Single类型数据(可空类型）
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetBoolean(System.String)">
            <summary>
            转换为布尔类型数据
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetBoolean(System.String,System.Boolean)">
            <summary>
            转换为布尔类型数据
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetBooleanNullable(System.String)">
            <summary>
            转换为布尔类型数据(可空类型）
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetString(System.String)">
            <summary>
            转换为字符串类型数据
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetString(System.String,System.String)">
            <summary>
            转换为字符串类型数据
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetBytes(System.String)">
            <summary>
            转换为Byte字节数据类型数据
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetBytes(System.String,System.String)">
            <summary>
            转换为Byte字节数据类型数据
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetGuid(System.String)">
            <summary>
            转换为Guid类型数据
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetGuid(System.String,System.String)">
            <summary>
            转换为Guid类型数据
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetGuidNullable(System.String)">
            <summary>
            转换为Guid类型数据(可空类型）
            </summary> 
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetDateTime(System.String)">
            <summary>
            转换为DateTime类型数据
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetDateTime(System.String,System.DateTime)">
            <summary>
            转换为DateTime类型数据
            </summary>
        </member>
        <member name="M:LSLibrary.SmartDataReader.GetDateTimeNullable(System.String)">
            <summary>
            转换为可空DateTime类型数据
            </summary>
        </member>
        <member name="T:LSLibrary.SqlScriptHelper">
            <summary>
            OSql命令操作函数（可用于安装程序的时候数据库脚本执行）
            </summary>
        </member>
        <member name="M:LSLibrary.SqlScriptHelper.DoSQL(System.String)">
            <summary>
            本地执行SQL脚本
            </summary>
            <param name="path">脚本文件路径全名</param>
        </member>
        <member name="M:LSLibrary.SqlScriptHelper.DoSQL(System.String,System.String,System.String,System.String)">
            <summary>
            执行SQL脚本
            </summary>
            <param name="path">脚本文件路径全名</param>
            <param name="userID">数据库登录ID</param>
            <param name="password">数据库登录密码</param>
            <param name="server">数据库服务器地址</param>
        </member>
        <member name="M:LSLibrary.SqlScriptHelper.RunDos(System.String,System.String,System.Boolean)">
            <summary>
            后台执行DOS文件
            </summary>
            <param name="fileName">文件名(包含路径)</param>
            <param name="argument">运行参数</param>
            <param name="hidden">是否隐藏窗口</param>
        </member>
        <member name="M:LSLibrary.SqlScriptHelper.ExecuteCMD(System.String,System.String,System.String,System.Boolean)">
              <summary>   
              运行指定DOS命令行   
              </summary>   
              <param name="cmd">命令</param>   
              <param name="tempFolder">命令行参数</param>   
              <param name="comfirm">写入命令行的确认信息</param>   
              <param name="showWindow">是否显示窗口</param> 
              <returns></returns>   
        </member>
        <member name="M:LSLibrary.SqlScriptHelper.ReplaceDBName(System.String,System.String,System.String)">
            <summary>
            在运行脚本之前把脚本中的数据库名称替换成安装界面输入的数据库名称
            </summary>
            <param name="filePath">脚本文件名</param>
            <param name="oldDBName">原有的数据库名称</param>
            <param name="newDBName">新的数据库名称</param>
        </member>
        <member name="M:LSLibrary.SqlScriptHelper.WriteLog(System.String)">
            <summary>
            为测试使用的函数
            </summary>
            <param name="fileText">输出的内容</param>
        </member>
        <member name="M:LSLibrary.SqlScriptHelper.UpdatePathEnvironment(System.String)">
            <summary>
            加入安装文件的路径，方便Web端访问
            </summary>
        </member>
        <member name="M:LSLibrary.SqlScriptHelper.AttachDB(System.String,System.String,System.String,System.String)">
            <summary>
            附加SqlServer数据库
            </summary>
        </member>
        <member name="M:LSLibrary.SqlScriptHelper.DetachDB(System.String,System.String)">
            <summary>
            分离SqlServer数据库
            </summary>
        </member>
        <member name="M:LSLibrary.SqlScriptHelper.RestoreDataBase(System.String,System.String,System.String,System.String)">
            <summary>
            还原数据库
            </summary>
        </member>
        <member name="M:LSLibrary.SqlScriptHelper.BackupDataBase(System.String,System.String,System.String,System.String)">
            <summary>
            备份SqlServer数据库
            </summary>
        </member>
        <member name="T:LSLibrary.FileUtil">
            <summary>
            常用的文件操作辅助类FileUtil
            </summary>
        </member>
        <member name="M:LSLibrary.FileUtil.StreamToBytes(System.IO.Stream)">
            <summary>
            将流读取到缓冲区中
            </summary>
            <param name="stream">原始流</param>
        </member>
        <member name="M:LSLibrary.FileUtil.BytesToStream(System.Byte[])">
            <summary>
            将 byte[] 转成 Stream
            </summary>
        </member>
        <member name="M:LSLibrary.FileUtil.StreamToFile(System.IO.Stream,System.String)">
            <summary>
            将 Stream 写入文件
            </summary>
        </member>
        <member name="M:LSLibrary.FileUtil.FileToStream(System.String)">
            <summary>
            从文件读取 Stream
            </summary>
        </member>
        <member name="M:LSLibrary.FileUtil.FileToString(System.String,System.Text.Encoding)">
            <summary>
            将文件读取到字符串中
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:LSLibrary.FileUtil.ReadFileFromEmbedded(System.String)">
            <summary>
            从嵌入资源中读取文件内容(e.g: xml).
            </summary>
            <param name="fileWholeName">嵌入资源文件名，包括项目的命名空间.</param>
            <returns>资源中的文件内容.</returns>
        </member>
        <member name="M:LSLibrary.FileUtil.GetEncoding(System.String)">
            <summary>
            获取文件编码
            </summary>
            <param name="filePath">文件绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileUtil.GetEncoding(System.String,System.Text.Encoding)">
            <summary>
            获取文件编码
            </summary>
            <param name="filePath">文件绝对路径</param>
            <param name="defaultEncoding">找不到则返回这个默认编码</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileUtil.WriteText(System.String,System.String)">
            <summary>
            向文本文件中写入内容
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="content">写入的内容</param>
        </member>
        <member name="M:LSLibrary.FileUtil.Copy(System.String,System.String)">
            <summary>
            将源文件的内容复制到目标文件中
            </summary>
            <param name="sourceFilePath">源文件的绝对路径</param>
            <param name="destFilePath">目标文件的绝对路径</param>
        </member>
        <member name="M:LSLibrary.FileUtil.Move(System.String,System.String)">
            <summary>
            将文件移动到指定目录
            </summary>
            <param name="sourceFilePath">需要移动的源文件的绝对路径</param>
            <param name="descDirectoryPath">移动到的目录的绝对路径</param>
        </member>
        <member name="M:LSLibrary.FileUtil.IsExistFile(System.String)">
            <summary>
            检测指定文件是否存在,如果存在则返回true。
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:LSLibrary.FileUtil.CreateFile(System.String)">
            <summary>
            创建一个文件。
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:LSLibrary.FileUtil.CreateFile(System.String,System.Byte[])">
            <summary>
            创建一个文件,并将字节流写入文件。
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="buffer">二进制流数据</param>
        </member>
        <member name="M:LSLibrary.FileUtil.GetLineCount(System.String)">
            <summary>
            获取文本文件的行数
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:LSLibrary.FileUtil.GetFileName(System.String)">
            <summary>
            从文件的绝对路径中获取文件名( 包含扩展名 )
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:LSLibrary.FileUtil.GetFileNameNoExtension(System.String)">
            <summary>
            从文件的绝对路径中获取文件名( 不包含扩展名 )
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:LSLibrary.FileUtil.GetExtension(System.String)">
            <summary>
            从文件的绝对路径中获取扩展名
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:LSLibrary.FileUtil.ClearFile(System.String)">
            <summary>
            清空文件内容
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:LSLibrary.FileUtil.DeleteFile(System.String)">
            <summary>
            删除指定文件
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:LSLibrary.FileUtil.FileIsExist(System.String)">
            <summary>
            文件是否存在或无权访问
            </summary>
            <param name="path">相对路径或绝对路径</param>
            <returns>如果是目录也返回false</returns>
        </member>
        <member name="M:LSLibrary.FileUtil.FileIsReadOnly(System.String)">
            <summary>
            文件是否只读
            </summary>
            <param name="fullpath"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileUtil.SetFileReadonly(System.String,System.Boolean)">
            <summary>
            设置文件是否只读
            </summary>
            <param name="fullpath"></param>
            <param name="flag">true表示只读，反之</param>
        </member>
        <member name="M:LSLibrary.FileUtil.GetFileName(System.String,System.Boolean)">
            <summary>
            取文件名
            </summary>
            <param name="fullpath"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileUtil.GetFileCreateTime(System.String)">
            <summary>
            取文件创建时间
            </summary>
            <param name="fullpath"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileUtil.GetLastWriteTime(System.String)">
            <summary>
            取文件最后存储时间
            </summary>
            <param name="fullpath"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileUtil.CreateTempZeroByteFile">
            <summary>
            创建一个零字节临时文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileUtil.GetRandomFileName">
            <summary>
            创建一个随机文件名，不创建文件本身
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileUtil.CompareFilesHash(System.String,System.String)">
            <summary>
            判断两个文件的哈希值是否一致
            </summary>
            <param name="fileName1"></param>
            <param name="fileName2"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileUtil.LoadObjectFromXml(System.String,System.Type)">
            <summary>
            从XML文件转换为Object对象类型.
            </summary>
            <param name="path">XML文件路径</param>
            <param name="type">Object对象类型</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileUtil.SaveObjectToXml(System.String,System.Object)">
            <summary>
            保存对象到特定格式的XML文件
            </summary>
            <param name="path">XML文件路径.</param>
            <param name="obj">待保存的对象</param>
        </member>
        <member name="T:LSLibrary.ArgumentValidation">
            <summary>
            参数验证的通用验证程序。(来自Enterprise Library2005的Common项目)
            </summary>
        </member>
        <member name="M:LSLibrary.ArgumentValidation.CheckForEmptyString(System.String,System.String)">
            <summary>
            <para>检查参数<paramref name="variable"/>是否为空字符串。</para>
            </summary>
            <param name="variable">
            <para>检查的价值.</para>
            </param>
            <param name="variableName">
            <para>被检查的变量的名称。</para>
            </param>
            <remarks>
            <para>Before checking the <paramref name="variable"/>, a call is made to <see cref="M:LSLibrary.ArgumentValidation.CheckForNullReference(System.Object,System.String)"/>.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <pararef name="variable"/> can not be <see langword="null"/> (Nothing in Visual Basic).
            <para>- or -</para>
            <pararef name="variableName"/> can not be <see langword="null"/> (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentException">
            <pararef name="variable"/> can not be a zero length <see cref="T:System.String"/>.
            </exception>
        </member>
        <member name="M:LSLibrary.ArgumentValidation.CheckForNullReference(System.Object,System.String)">
            <summary>
            <para>检查参数<paramref name="variable"/>是否为空引用(Null)。</para>
            </summary>
            <param name="variable">
            <para>The value to check.</para>
            </param>
            <param name="variableName">
            <para>The name of the variable being checked.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <pararef name="variable"/> can not <see langword="null"/> (Nothing in Visual Basic).
            <para>- or -</para>
            <pararef name="variableName"/> can not <see langword="null"/> (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="M:LSLibrary.ArgumentValidation.CheckForInvalidNullNameReference(System.String,System.String)">
            <summary>
            验证输入的参数messageName非空字符串，也非空引用
            </summary>
            <param name="name">Parameter name</param>
            <param name="messageName">Parameter value</param>
        </member>
        <member name="M:LSLibrary.ArgumentValidation.CheckForZeroBytes(System.Byte[],System.String)">
            <summary>
            <para>验证参数<paramref name="bytes"/>非零长度，如果为零长度，则抛出异常<see cref="T:System.ArgumentException"/>。</para>
            </summary>
            <param name="bytes">
            The <see cref="T:System.Byte"/> array to check.
            </param>
            <param name="variableName">
            <para>The name of the variable being checked.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <pararef name="variable"/> can not <see langword="null"/> (Nothing in Visual Basic).
            <para>- or -</para>
            <pararef name="variableName"/> can not <see langword="null"/> (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="bytes"/> can not be zero length.</para>
            </exception>
        </member>
        <member name="M:LSLibrary.ArgumentValidation.CheckExpectedType(System.Object,System.Type)">
            <summary>
            <para>检查参数<paramref name="variable"/>是否符合指定的类型。</para>
            </summary>
            <param name="variable">
            <para>The value to check.</para>
            </param>
            <param name="type">
            <para>The <see cref="T:System.Type"/> expected type of <paramref name="variable"/>.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <pararef name="variable"/> can not <see langword="null"/> (Nothing in Visual Basic).
            <para>- or -</para>
            <pararef name="typeName"/> can not <see langword="null"/> (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="variable"/> is not the expected <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="M:LSLibrary.ArgumentValidation.CheckEnumeration(System.Type,System.Object,System.String)">
            <summary>
            <para>Check <paramref name="variable"/> to determine if it is a valid defined enumeration for <paramref name="enumType"/>.</para>
            </summary>
            <param name="variable">
            <para>The value to check.</para>
            </param>
            <param name="enumType">
            <para>The <see cref="T:System.Type"/> expected type of <paramref name="variable"/>.</para>
            </param>
            <param name="variableName">
            <para>The name of the variable being checked.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <pararef name="variable"/> can not <see langword="null"/> (Nothing in Visual Basic).
            <para>- or -</para>
            <pararef name="enumType"/> can not <see langword="null"/> (Nothing in Visual Basic).
            <para>- or -</para>
            <pararef name="variableName"/> can not <see langword="null"/> (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="variable"/> is not the expected <see cref="T:System.Type"/>.
            <para>- or -</para>
            <par><paramref name="enumType"/> is not an <see cref="T:System.Enum"/>. </par>
            </exception>
        </member>
        <member name="T:LSLibrary.AudioHelper">
            <summary>
            声音播放辅助类
            </summary>
        </member>
        <member name="M:LSLibrary.AudioHelper.Play(System.String)">
            <summary>播放。wav声音文件。</summary>
            <param name="location">String，包含声音文件的名称 </param>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlThread" /><IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:LSLibrary.AudioHelper.Play(System.String,LSLibrary.AudioPlayMode)">
            <summary>播放。wav声音文件.</summary>
            <param name="playMode">AudioPlayMode枚举模式播放声音。默认情况下，AudioPlayMode.Background。</param>
            <param name="location">String，包含声音文件的名称 </param>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlThread" /><IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:LSLibrary.AudioHelper.Play(System.IO.Stream,LSLibrary.AudioPlayMode)">
            <summary>播放。wav声音文件。</summary>
            <param name="playMode">AudioPlayMode枚举模式播放声音。默认情况下，AudioPlayMode.Background。</param>
            <param name="stream"><see cref="T:System.IO.Stream"></see> 代表的声音文件。</param>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlThread" /><IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:LSLibrary.AudioHelper.Play(System.Byte[],LSLibrary.AudioPlayMode)">
            <summary>播放。wav声音文件。</summary>
            <param name="data">字节数组代表的声音文件。</param>
            <param name="playMode">AudioPlayMode枚举模式播放声音。默认情况下，AudioPlayMode.Background。</param>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlThread" /><IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:LSLibrary.AudioHelper.PlaySystemSound(System.Media.SystemSound)">
            <summary>播放系统声音。</summary>
            <param name="systemSound"><see cref="T:System.Media.SystemSound"></see> 对象代表系统播放声音。</param>
        </member>
        <member name="M:LSLibrary.AudioHelper.Stop">
            <summary>停止在后台播放声音。</summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:LSLibrary.AudioPlayMode">
            <summary>指示如何调用音频方法时，播放声音。</summary>
        </member>
        <member name="F:LSLibrary.AudioPlayMode.WaitToComplete">
            <summary>
            播放声音，并等待，直到它完成之前调用代码继续。 
            </summary>
        </member>
        <member name="F:LSLibrary.AudioPlayMode.Background">
            <summary>
            在后台播放声音。调用代码继续执行。 
            </summary>
        </member>
        <member name="F:LSLibrary.AudioPlayMode.BackgroundLoop">
             <summary>
            直到stop方法被称为播放背景声音。调用代码继续执行。 
             </summary>
        </member>
        <member name="T:LSLibrary.ByteImageConvertor">
             <summary>
            这个类提供了实用方法的字节数组和图像之间的转换。
             </summary>
        </member>
        <member name="M:LSLibrary.ByteImageConvertor.ByteToImage(System.Byte[])">
            <summary>
            的PO的字节数组转换VO的形象。
            </summary>
            <param name="bytes">在PO字节数组。</param>
            <returns>图像对象。</returns>
        </member>
        <member name="M:LSLibrary.ByteImageConvertor.ImageToByte(System.Drawing.Image)">
            <summary>
            宝的字节转换的VO的形象成员。
            </summary>
            <param name="image">在VO的Image对象。</param>
            <returns>字节数组。</returns>
        </member>
        <member name="T:LSLibrary.AppConfig">
            <summary>
            用于获取或设置Web.config/*.exe.config中节点数据的辅助类
            </summary>
        </member>
        <member name="M:LSLibrary.AppConfig.#ctor">
            <summary>
            从当前目录中按顺序检索Web.Config和*.App.Config文件。
            如果找到一个，则使用它作为配置文件；否则会抛出一个ArgumentNullException异常。
            </summary>
        </member>
        <member name="M:LSLibrary.AppConfig.#ctor(System.String)">
            <summary>
            用户指定具体的配置文件路径
            </summary>
            <param name="configFilePath">配置文件路径（绝对路径）</param>
        </member>
        <member name="M:LSLibrary.AppConfig.AppConfigSet(System.String,System.String)">
            <summary>
            设置程序的config文件
            </summary>
            <param name="keyName">键名</param>
            <param name="keyValue">键值</param>
        </member>
        <member name="M:LSLibrary.AppConfig.AppConfigGet(System.String)">
            <summary>
            读取程序的config文件的键值。
            如果键名不存在，返回空
            </summary>
            <param name="keyName">键名</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.AppConfig.GetSubValue(System.String,System.String)">
            <summary>
            获取指定键名中的子项的值
            </summary>
            <param name="keyName">键名</param>
            <param name="subKeyName">以分号(;)为分隔符的子项名称</param>
            <returns>对应子项名称的值（即是=号后面的值）</returns>
        </member>
        <member name="P:LSLibrary.AppConfig.HWSecurity">
            <summary>
            从配置文件获取权限系统链接（配置项HWSecurity的值）
            </summary>
        </member>
        <member name="P:LSLibrary.AppConfig.System_ID">
            <summary>
            系统的标识ID（配置项System_ID的值）
            </summary>
        </member>
        <member name="P:LSLibrary.AppConfig.AppName">
            <summary>
            应用程序名称（配置项ApplicationName的值）
            </summary>
        </member>
        <member name="P:LSLibrary.AppConfig.Manufacturer">
            <summary>
            软件厂商名称（配置项Manufacturer的值）
            </summary>
        </member>
        <member name="M:LSLibrary.AppConfig.SetConnectionString(System.String,System.String)">
            <summary>
            设置程序的config文件的Enterprise Library的数据库链接地址
            </summary>
            <param name="filePath">Web.config或者*.exe.config文件的绝对路径</param>
            <param name="keyName">键名</param>
            <param name="keyValue">键值</param>
        </member>
        <member name="M:LSLibrary.AppConfig.GetConnectionString(System.String)">
            <summary>
            读取程序的config文件Enterprise Library的数据库链接地址
            </summary>
            <param name="filePath">Web.config或者*.exe.config文件的绝对路径</param>
            <param name="keyName">键名</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.AppConfig.GetDatabaseInfo(System.String)">
            <summary>
            获取数据库配置信息
            </summary>
            <param name="keyName">节点名称</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.AppConfig.SetDatabaseInfo(System.String,LSLibrary.DatabaseInfo)">
            <summary>
            设置数据库配置信息
            </summary>
            <param name="keyName"></param>
            <param name="databaseInfo"></param>
        </member>
        <member name="T:LSLibrary.BytesTools">
            <summary>
            byte字节数组操作辅助类
            </summary>
        </member>
        <member name="M:LSLibrary.BytesTools.ToSBC(System.Byte[])">
            <summary>
            半角转全角函数
            </summary>
            <param name="srcbuff"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.BytesTools.SubBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从 byte[] 中截取子串
            </summary>
            <param name="srcbuff"></param>
            <param name="start"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.BytesTools.SwapBytes(System.Byte[])">
            <summary>
            将 byte[] 顺序反转
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.BytesTools.GetSwapBytes(System.UInt16)">
            <summary>
            获取 ushort 的高低位反转 byte[]
            </summary>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.BytesTools.GetSwapBytes(System.Int32)">
            <summary>
            获取 int 的高低位反转 byte[]
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.BytesTools.SpecCharConvert(System.Byte[])">
            <summary>
            转义特殊字符，即 '~'(0x7E)
            </summary>
            <param name="srcbuff"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.BytesTools.SpecCharReverse(System.Byte[])">
            <summary>
            反转义特殊字符，即 '~'(0x7E)
            0x7D0x5E->0x7E, 0x7D0x5D->0x7D
            </summary>
            <param name="srcbuff"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.BytesTools.BufferLookup(System.Byte[],System.Byte[])">
            <summary>
            在 srcbuff 中查找 subbuff 第一次出现的位置
            </summary>
            <param name="srcbuff"></param>
            <param name="subbuff"></param>
            <returns>找到则返回匹配开始的位置，没有找到返回 -1</returns>
        </member>
        <member name="M:LSLibrary.BytesTools.BufferLookup(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            在 srcbuff 中查找 subbuff 第一次出现的位置
            </summary>
            <param name="srcbuff"></param>
            <param name="subbuff"></param>
            <param name="start">开始查找的位置</param>
            <returns>找到则返回匹配开始的位置，没有找到返回 -1</returns>
        </member>
        <member name="M:LSLibrary.BytesTools.BufferLookup(System.Byte[],System.String)">
            <summary>
            在 srcbuff 中查找 subchars 第一次出现的位置
            </summary>
            <param name="srcbuff"></param>
            <param name="subchars">ASCII字符串</param>
            <returns>找到则返回匹配开始的位置，没有找到返回 -1</returns>
        </member>
        <member name="M:LSLibrary.BytesTools.BufferLookup(System.Byte[],System.String,System.Int32)">
            <summary>
            在 srcbuff 中查找 subchars 第一次出现的位置
            </summary>
            <param name="srcbuff"></param>
            <param name="subchars">ASCII字符串</param>
            <param name="start">开始查找的位置</param>
            <returns>找到则返回匹配开始的位置，没有找到返回 -1</returns>
        </member>
        <member name="M:LSLibrary.BytesTools.BytesToHex(System.Byte[])">
            <summary>
            将二进制的数据转成Hex格式
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.BytesTools.ToDBDate(System.DateTime)">
            <summary>
            将日期时间格式的字符串转换到数据库使用的日期类型
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.BytesTools.GetSwappedUshort(System.Byte[],System.Int32)">
            <summary>
            将倒序的ushort字节还原为ushort
            </summary>
            <param name="buffer"></param>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.BytesTools.GetSwappedUint(System.Byte[],System.Int32)">
            <summary>
            将倒序的uint字节还原为uint
            </summary>
            <param name="buffer"></param>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.BytesTools.Revert7BDateTime(System.Byte[])">
            <summary>
            转换时间格式
            原始数据：FFFF-FF-FF FF:FF:FF 每个F对应YYYY-MM-DD hh:mm:ss中的一个数字
                         共7个字节。比如 0x20 0x08 0x09 0x20 0x23 0x12 0x34 表示 2008-09-20 23:12:34
            </summary>
            <param name="timeBuff"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.BytesTools.HexToBytes(System.String)">
            <summary>
            Hex进制转二进制
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.BytesTools.Compare(System.Byte[],System.Byte[])">
            <summary>
            确定两个字节数组是相等的。
            </summary>
            <param name="byte1">第一个字节数组进行比较。</param>
            <param name="byte2">字节数组的第一个比较。</param>
            <returns><see langword="true"/> 如果两个字节数组是相等的，否则 <see langword="false"/>.</returns>
        </member>
        <member name="M:LSLibrary.BytesTools.Combine(System.Byte[],System.Byte[])">
            <summary>
            结合成一个两个字节数组。
            </summary>
            <param name="byte1">前缀字节。</param>
            <param name="byte2">后缀字节。</param>
            <returns>合并后的字节数组.</returns>
        </member>
        <member name="M:LSLibrary.BytesTools.Clone(System.Byte[])">
            <summary>
            复制到一个新的字节数组。
            </summary>
            <param name="byte1">字节数组创建新的阵列。</param>
            <returns>克隆的字节数组。</returns>
        </member>
        <member name="M:LSLibrary.BytesTools.GetBytesFromHexString(System.String)">
            <summary>
            <para>代表一个十六进制数字的字符串返回一个字节数组。</para>
            </summary>
            <param name="hexadecimalNumber">
            <para>该字符串包含一个有效的十六进制数字。</para>
            </param>
            <returns><para>代表的十六进制字节数组。</para></returns>
        </member>
        <member name="M:LSLibrary.BytesTools.GetHexStringFromBytes(System.Byte[])">
            <summary>
            <para>返回一个字符串的字节数组表示为十六进制数（如：0F351A）。</para>
            </summary>
            <param name="bytes">
            <para>字节数组转换为一个十六进制数字格式。</para>
            </param>
            <returns>
            <para>作为一个十六进制数的字节格式表示。</para>
            </returns>
        </member>
        <member name="T:LSLibrary.Cache">
            <summary>
            全局统一的缓存类
            </summary>
        </member>
        <member name="T:LSLibrary.ClipboardHepler">
            <summary>提供用于操作剪贴板的方法.</summary>
        </member>
        <member name="M:LSLibrary.ClipboardHepler.Clear">
            <summary>清除“剪贴板”。</summary>
        </member>
        <member name="M:LSLibrary.ClipboardHepler.ContainsAudio">
            <summary>指示剪贴板中是否包含音频数据。</summary>
            <returns>True如果音频数据存储在剪贴板中，否则为false。</returns>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="M:LSLibrary.ClipboardHepler.ContainsData(System.String)">
            <summary>指示剪贴板中是否包含在指定的自定义格式的数据。</summary>
            <returns>true，如果在指定的自定义格式的数据存储在剪贴板中，否则为false。</returns>
            <param name="format">字符串。自定义格式的名称进行检查。必需的。 </param>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="M:LSLibrary.ClipboardHepler.ContainsFileDropList">
            <summary>返回一个布尔值，指示剪贴板中是否包含一个文件下拉列表。</summary>
            <returns>如果一个文件下拉列表中真正存储在剪贴板中，否则为false。</returns>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="M:LSLibrary.ClipboardHepler.ContainsImage">
            <summary>返回一个布尔值，指示是否存储在剪贴板上的图像被。</summary>
            <returns>真正的图像存储在剪贴板上，否则为false。</returns>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="M:LSLibrary.ClipboardHepler.ContainsText">
            <summary>确定是否存在剪贴板上的文字。</summary>
            <returns>true，如果剪贴板中包含文本，否则为false。</returns>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="M:LSLibrary.ClipboardHepler.ContainsText(System.Windows.Forms.TextDataFormat)">
            <summary>确定是否存在剪贴板上的文字。</summary>
            <returns>true，如果剪贴板中包含文本，否则为false。</returns>
            <param name="format"><see cref="T:System.Windows.Forms.TextDataFormat"></see>.如果指定，确定什么样的文本格式检查。必需的。</param>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="M:LSLibrary.ClipboardHepler.GetAudioStream">
            <summary>从剪贴板中检索音频流。</summary>
            <returns><see cref="T:System.IO.Stream"></see></returns>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="M:LSLibrary.ClipboardHepler.GetData(System.String)">
            <summary>在自定义格式从剪贴板检索数据。</summary>
            <returns>对象。</returns>
            <param name="format">字符串。数据格式的名称。必需的。 </param>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="M:LSLibrary.ClipboardHepler.GetDataObject">
            <summary>从剪贴板作为检索数据 <see cref="T:System.Windows.Forms.IDataObject"></see>.</summary>
            <returns><see cref="T:System.Windows.Forms.IDataObject"></see></returns>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="M:LSLibrary.ClipboardHepler.GetFileDropList">
            <summary>检索代表从剪贴板中的文件名的字符串的集合。</summary>
            <returns><see cref="T:System.Collections.Specialized.StringCollection"></see></returns>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="M:LSLibrary.ClipboardHepler.GetImage">
            <summary>从剪贴板中检索图像。</summary>
            <returns><see cref="T:System.Drawing.Image"></see></returns>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="M:LSLibrary.ClipboardHepler.GetText">
            <summary>从剪贴板中检索文本。</summary>
            <returns>String.</returns>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="M:LSLibrary.ClipboardHepler.GetText(System.Windows.Forms.TextDataFormat)">
            <summary>从剪贴板中检索文本。</summary>
            <returns>String.</returns>
            <param name="format"><see cref="T:System.Windows.Forms.TextDataFormat"></see>. If specified, identifies what text format should be retrieved. Default is <see cref="F:System.Windows.Forms.TextDataFormat.CommaSeparatedValue"></see>. Required. </param>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="M:LSLibrary.ClipboardHepler.SetAudio(System.IO.Stream)">
            <summary>将音频数据写入到剪贴板。</summary>
            <param name="audioStream"><see cref="T:System.IO.Stream"></see> 音频数据被写入到剪贴板。必需的。 </param>
        </member>
        <member name="M:LSLibrary.ClipboardHepler.SetAudio(System.Byte[])">
            <summary>将音频数据写入到剪贴板。</summary>
            <param name="audioBytes">字节数组。音频数据被写入到剪贴板。必需的。 </param>
        </member>
        <member name="M:LSLibrary.ClipboardHepler.SetData(System.String,System.Object)">
            <summary>将自定义格式的数据写入到剪贴板。</summary>
            <param name="data">对象。数据对象被写入到剪贴板。必需的。 </param>
            <param name="format">字符串。数据格式。必需的。</param>
        </member>
        <member name="M:LSLibrary.ClipboardHepler.SetDataObject(System.Windows.Forms.DataObject)">
            <summary>写入<see cref="T:System.Windows.Forms.DataObject"></see> 到剪贴板。</summary>
            <param name="data"><see cref="T:System.Windows.Forms.DataObject"></see>.数据对象被写入到剪贴板。必需的。 </param>
        </member>
        <member name="M:LSLibrary.ClipboardHepler.SetFileDropList(System.Collections.Specialized.StringCollection)">
            <summary>写一个代表文件路径到剪贴板的字符串的集合。</summary>
            <param name="filePaths"><see cref="T:System.Collections.Specialized.StringCollection"></see>.文件名列表。必需的。 </param>
        </member>
        <member name="M:LSLibrary.ClipboardHepler.SetImage(System.Drawing.Image)">
            <summary>写入剪贴板形象。</summary>
            <param name="image"><see cref="T:System.Drawing.Image"></see>.要写入的图像。必需的。 </param>
        </member>
        <member name="M:LSLibrary.ClipboardHepler.SetText(System.String)">
            <summary>写入到剪贴板中的文本。</summary>
            <param name="text">字符串。要写入的文字。必需的。</param>
        </member>
        <member name="M:LSLibrary.ClipboardHepler.SetText(System.String,System.Windows.Forms.TextDataFormat)">
            <summary>将文本写入到剪贴板.</summary>
            <param name="format"><see cref="T:System.Windows.Forms.TextDataFormat"></see>. 格式为文字时使用。默认为 <see cref="F:System.Windows.Forms.TextDataFormat.UnicodeText"></see>. Required. </param>
            <param name="text">字符串。要写入的文字。必需的。</param>
        </member>
        <member name="M:LSLibrary.ClipboardHepler.SafeSetClipboard(System.Object)">
            <summary>
            线程安全的设置内容
            </summary>
            <param name="dataObject"></param>
        </member>
        <member name="T:LSLibrary.Computer">
            <summary>
            电脑信息
            </summary>
        </member>
        <member name="T:LSLibrary.Computer.CpuUsage">
            <summary>
            Defines an abstract base class for implementations of CPU usage counters.
            </summary>
        </member>
        <member name="M:LSLibrary.Computer.CpuUsage.Create">
            <summary>
            Creates and returns a CpuUsage instance that can be used to query the CPU time on this operating system.
            </summary>
            <returns>An instance of the CpuUsage class.</returns>
            <exception cref="T:System.NotSupportedException">This platform is not supported -or- initialization of the CPUUsage object failed.</exception>
        </member>
        <member name="M:LSLibrary.Computer.CpuUsage.Query">
            <summary>
            Determines the current average CPU load.
            </summary>
            <returns>An integer that holds the CPU load percentage.</returns>
            <exception cref="T:System.NotSupportedException">One of the system calls fails. The CPU time can not be obtained.</exception>
        </member>
        <member name="F:LSLibrary.Computer.CpuUsage.m_CpuUsage">
            <summary>
            Holds an instance of the CPUUsage class.
            </summary>
        </member>
        <member name="T:LSLibrary.Computer.CpuUsage9x">
            <summary>
            Inherits the CPUUsage class and implements the Query method for Windows 9x systems.
            </summary>
            <remarks>
            <p>This class works on Windows 98 and Windows Millenium Edition.</p>
            <p>You should not use this class directly in your code. Use the CPUUsage.Create() method to instantiate a CPUUsage object.</p>
            </remarks>
        </member>
        <member name="M:LSLibrary.Computer.CpuUsage9x.#ctor">
            <summary>
            Initializes a new CPUUsage9x instance.
            </summary>
            <exception cref="T:System.NotSupportedException">One of the system calls fails.</exception>
        </member>
        <member name="M:LSLibrary.Computer.CpuUsage9x.Query">
            <summary>
            Determines the current average CPU load.
            </summary>
            <returns>An integer that holds the CPU load percentage.</returns>
            <exception cref="T:System.NotSupportedException">One of the system calls fails. The CPU time can not be obtained.</exception>
        </member>
        <member name="M:LSLibrary.Computer.CpuUsage9x.Finalize">
            <summary>
            Closes the allocated resources.
            </summary>
        </member>
        <member name="F:LSLibrary.Computer.CpuUsage9x.m_StatData">
            <summary>Holds the registry key that's used to read the CPU load.</summary>
        </member>
        <member name="T:LSLibrary.Computer.CpuUsageNt">
            <summary>
            Inherits the CPUUsage class and implements the Query method for Windows NT systems.
            </summary>
            <remarks>
            <p>This class works on Windows NT4, Windows 2000, Windows XP, Windows .NET Server and higher.</p>
            <p>You should not use this class directly in your code. Use the CPUUsage.Create() method to instantiate a CPUUsage object.</p>
            </remarks>
        </member>
        <member name="M:LSLibrary.Computer.CpuUsageNt.#ctor">
            <summary>
            Initializes a new CpuUsageNt instance.
            </summary>
            <exception cref="T:System.NotSupportedException">One of the system calls fails.</exception>
        </member>
        <member name="M:LSLibrary.Computer.CpuUsageNt.Query">
            <summary>
            Determines the current average CPU load.
            </summary>
            <returns>An integer that holds the CPU load percentage.</returns>
            <exception cref="T:System.NotSupportedException">One of the system calls fails. The CPU time can not be obtained.</exception>
        </member>
        <member name="M:LSLibrary.Computer.CpuUsageNt.NtQuerySystemInformation(System.Int32,System.Byte[],System.Int32,System.IntPtr)">
            <summary>
            NtQuerySystemInformation is an internal Windows function that retrieves various kinds of system information.
            </summary>
            <param name="dwInfoType">One of the values enumerated in SYSTEM_INFORMATION_CLASS, indicating the kind of system information to be retrieved.</param>
            <param name="lpStructure">Points to a buffer where the requested information is to be returned. The size and structure of this information varies depending on the value of the SystemInformationClass parameter.</param>
            <param name="dwSize">Length of the buffer pointed to by the SystemInformation parameter.</param>
            <param name="returnLength">Optional pointer to a location where the function writes the actual size of the information requested.</param>
            <returns>Returns a success NTSTATUS if successful, and an NTSTATUS error code otherwise.</returns>
        </member>
        <member name="F:LSLibrary.Computer.CpuUsageNt.SYSTEM_BASICINFORMATION">
            <summary>Returns the number of processors in the system in a SYSTEM_BASIC_INFORMATION structure.</summary>
        </member>
        <member name="F:LSLibrary.Computer.CpuUsageNt.SYSTEM_PERFORMANCEINFORMATION">
            <summary>Returns an opaque SYSTEM_PERFORMANCE_INFORMATION structure.</summary>
        </member>
        <member name="F:LSLibrary.Computer.CpuUsageNt.SYSTEM_TIMEINFORMATION">
            <summary>Returns an opaque SYSTEM_TIMEOFDAY_INFORMATION structure.</summary>
        </member>
        <member name="F:LSLibrary.Computer.CpuUsageNt.NO_ERROR">
            <summary>The value returned by NtQuerySystemInformation is no error occurred.</summary>
        </member>
        <member name="F:LSLibrary.Computer.CpuUsageNt.oldIdleTime">
            <summary>Holds the old idle time.</summary>
        </member>
        <member name="F:LSLibrary.Computer.CpuUsageNt.oldSystemTime">
            <summary>Holds the old system time.</summary>
        </member>
        <member name="F:LSLibrary.Computer.CpuUsageNt.processorCount">
            <summary>Holds the number of processors in the system.</summary>
        </member>
        <member name="M:LSLibrary.Computer.GetCpuUsage">
            <summary>
            获得Cpu使用率
            </summary>
            <returns>返回使用率</returns>
        </member>
        <member name="M:LSLibrary.Computer.GetCpuID">
            <summary>
            获取CPU序列号代码
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.Computer.GetMacAddress">
            <summary>
            获取网卡硬件地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.Computer.GetDiskID">
            <summary>
            获取硬盘ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.Computer.GetUserName">
            <summary>
            操作系统的登录用户名
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.Computer.GetComputerName">
            <summary>
            获取计算机名
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.Computer.GetSystemType">
            <summary>
            PC类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.Computer.GetTotalPhysicalMemory">
            <summary>
            物理内存
            </summary>
            <returns></returns>
        </member>
        <member name="T:LSLibrary.ConvertHelper">
            <summary>
            处理数据类型转换，数制转换、编码转换相关的类
            </summary>
        </member>
        <member name="M:LSLibrary.ConvertHelper.ConvertBase(System.String,System.Int32,System.Int32)">
            <summary>
            实现各进制数间的转换。ConvertBase("15",10,16)表示将十进制数15转换为16进制的数。
            </summary>
            <param name="value">要转换的值,即原值</param>
            <param name="from">原值的进制,只能是2,8,10,16四个值。</param>
            <param name="to">要转换到的目标进制，只能是2,8,10,16四个值。</param>
        </member>
        <member name="M:LSLibrary.ConvertHelper.isBaseNumber(System.Int32)">
            <summary>
            判断是否是  2 8 10 16
            </summary>
            <param name="baseNumber"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ConvertHelper.StringToBytes(System.String)">
            <summary>
            将string转换成byte[]
            </summary>
            <param name="text">要转换的字符串</param>
        </member>
        <member name="M:LSLibrary.ConvertHelper.StringToBytes(System.String,System.Text.Encoding)">
            <summary>
            使用指定字符集将string转换成byte[]
            </summary>
            <param name="text">要转换的字符串</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:LSLibrary.ConvertHelper.BytesToString(System.Byte[])">
            <summary>
            将byte[]转换成string
            </summary>
            <param name="bytes">要转换的字节数组</param>
        </member>
        <member name="M:LSLibrary.ConvertHelper.BytesToString(System.Byte[],System.Text.Encoding)">
            <summary>
            使用指定字符集将byte[]转换成string
            </summary>
            <param name="bytes">要转换的字节数组</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:LSLibrary.ConvertHelper.BytesToInt32(System.Byte[])">
            <summary>
            将byte[]转换成int
            </summary>
            <param name="data">需要转换成整数的byte数组</param>
        </member>
        <member name="M:LSLibrary.ConvertHelper.ToInt32``1(``0,System.Int32)">
            <summary>
            将数据转换为整型   转换失败返回默认值
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ConvertHelper.ToInt32(System.String,System.Int32)">
            <summary>
            将数据转换为整型   转换失败返回默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ConvertHelper.ToInt32(System.Object,System.Int32)">
            <summary>
            将数据转换为整型  转换失败返回默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ConvertHelper.ToBoolean``1(``0,System.Boolean)">
            <summary>
            将数据转换为布尔类型  转换失败返回默认值
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ConvertHelper.ToBoolean(System.String,System.Boolean)">
            <summary>
            将数据转换为布尔类型  转换失败返回 默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ConvertHelper.ToBoolean(System.Object,System.Boolean)">
            <summary>
            将数据转换为布尔类型  转换失败返回 默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ConvertHelper.ToFloat``1(``0,System.Single)">
            <summary>
            将数据转换为单精度浮点型  转换失败 返回默认值
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ConvertHelper.ToFloat(System.Object,System.Single)">
            <summary>
            将数据转换为单精度浮点型   转换失败返回默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ConvertHelper.ToFloat(System.String,System.Single)">
            <summary>
            将数据转换为单精度浮点型   转换失败返回默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ConvertHelper.ToDouble``1(``0,System.Double)">
            <summary>
            将数据转换为双精度浮点型   转换失败返回默认值
            </summary>
            <typeparam name="T">数据的类型</typeparam>
            <param name="data">要转换的数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ConvertHelper.ToDouble``1(``0,System.Int32,System.Double)">
            <summary>
            将数据转换为双精度浮点型,并设置小数位   转换失败返回默认值
            </summary>
            <typeparam name="T">数据的类型</typeparam>
            <param name="data">要转换的数据</param>
            <param name="decimals">小数的位数</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ConvertHelper.ToDouble(System.Object,System.Double)">
            <summary>
            将数据转换为双精度浮点型  转换失败返回默认值
            </summary>
            <param name="data">要转换的数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ConvertHelper.ToDouble(System.String,System.Double)">
            <summary>
            将数据转换为双精度浮点型  转换失败返回默认值
            </summary>
            <param name="data">要转换的数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ConvertHelper.ToDouble(System.Object,System.Int32,System.Double)">
            <summary>
            将数据转换为双精度浮点型,并设置小数位  转换失败返回默认值
            </summary>
            <param name="data">要转换的数据</param>
            <param name="decimals">小数的位数</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ConvertHelper.ToDouble(System.String,System.Int32,System.Double)">
            <summary>
            将数据转换为双精度浮点型,并设置小数位  转换失败返回默认值
            </summary>
            <param name="data">要转换的数据</param>
            <param name="decimals">小数的位数</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ConvertHelper.ConvertTo(System.Object,System.Type)">
            <summary>
            将数据转换为指定类型
            </summary>
            <param name="data">转换的数据</param>
            <param name="targetType">转换的目标类型</param>
        </member>
        <member name="M:LSLibrary.ConvertHelper.ConvertTo``1(System.Object)">
            <summary>
            将数据转换为指定类型
            </summary>
            <typeparam name="T">转换的目标类型</typeparam>
            <param name="data">转换的数据</param>
        </member>
        <member name="M:LSLibrary.ConvertHelper.ToDecimal``1(``0,System.Decimal)">
            <summary>
            将数据转换为Decimal  转换失败返回默认值
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ConvertHelper.ToDecimal(System.Object,System.Decimal)">
            <summary>
            将数据转换为Decimal  转换失败返回 默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ConvertHelper.ToDecimal(System.String,System.Decimal)">
            <summary>
            将数据转换为Decimal  转换失败返回 默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ConvertHelper.ToDateTime``1(``0,System.DateTime)">
            <summary>
            将数据转换为DateTime  转换失败返回默认值
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ConvertHelper.ToDateTime(System.Object,System.DateTime)">
            <summary>
            将数据转换为DateTime  转换失败返回 默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ConvertHelper.ToDateTime(System.String,System.DateTime)">
            <summary>
            将数据转换为DateTime  转换失败返回 默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ConvertHelper.ConvertToSBC(System.String)">
             <summary>
             转全角的函数(SBC case)
             </summary>
             <param name="input">任意字符串</param>
             <returns>全角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>
        </member>
        <member name="M:LSLibrary.ConvertHelper.ConvertToDBC(System.String)">
             <summary> 转半角的函数(DBC case) </summary>
             <param name="input">任意字符串</param>
             <returns>半角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>
        </member>
        <member name="T:LSLibrary.CrcUtils">
            <summary>
            CRC校验辅助类
            </summary>
        </member>
        <member name="T:LSLibrary.CRegex">
            <summary>
            正则表达式辅助类
            </summary>
        </member>
        <member name="M:LSLibrary.CRegex.IsMatch(System.String,System.String)">
            <summary>
            内容是否匹配指定的表达式
            </summary>
            <param name="sInput">输入内容</param>
            <param name="sRegex">表达式字符串</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.CRegex.GetList(System.String,System.String,System.Int32)">
            <summary>
            多个匹配内容
            </summary>
            <param name="sInput">输入内容</param>
            <param name="sRegex">表达式字符串</param>
            <param name="iGroupIndex">第几个分组, 从1开始, 0代表不分组</param>
        </member>
        <member name="M:LSLibrary.CRegex.GetList(System.String,System.String,System.String)">
            <summary>
            多个匹配内容
            </summary>
            <param name="sInput">输入内容</param>
            <param name="sRegex">表达式字符串</param>
            <param name="sGroupName">分组名, ""代表不分组</param>
        </member>
        <member name="M:LSLibrary.CRegex.GetText(System.String,System.String,System.Int32)">
            <summary>
            单个匹配内容
            </summary>
            <param name="sInput">输入内容</param>
            <param name="sRegex">表达式字符串</param>
            <param name="iGroupIndex">分组序号, 从1开始, 0不分组</param>
        </member>
        <member name="M:LSLibrary.CRegex.GetText(System.String,System.String,System.String)">
            <summary>
            单个匹配内容
            </summary>
            <param name="sInput">输入内容</param>
            <param name="sRegex">表达式字符串</param>
            <param name="sGroupName">分组名, ""代表不分组</param>
        </member>
        <member name="M:LSLibrary.CRegex.Replace(System.String,System.String,System.String,System.Int32)">
            <summary>
            替换指定内容
            </summary>
            <param name="sInput">输入内容</param>
            <param name="sRegex">表达式字符串</param>
            <param name="sReplace">替换值</param>
            <param name="iGroupIndex">分组序号, 0代表不分组</param>
        </member>
        <member name="M:LSLibrary.CRegex.Replace(System.String,System.String,System.String,System.String)">
            <summary>
            替换指定内容
            </summary>
            <param name="sInput">输入内容</param>
            <param name="sRegex">表达式字符串</param>
            <param name="sReplace">替换值</param>
            <param name="sGroupName">分组名, "" 代表不分组</param>
        </member>
        <member name="M:LSLibrary.CRegex.Split(System.String,System.String,System.Int32)">
            <summary>
            分割指定内容
            </summary>
            <param name="sInput">输入内容</param>
            <param name="sRegex">表达式字符串</param>
            <param name="iStrLen">最小保留字符串长度</param>
        </member>
        <member name="M:LSLibrary.CRegex.GetLinks(System.String)">
            <summary>
            多个链接
            </summary>
            <param name="sInput">输入内容</param>
        </member>
        <member name="M:LSLibrary.CRegex.GetLink(System.String)">
            <summary>
            单个链接
            </summary>
            <param name="sInput">输入内容</param>
        </member>
        <member name="M:LSLibrary.CRegex.GetImgTag(System.String)">
            <summary>
            图片标签
            </summary>
            <param name="sInput">输入内容</param>
        </member>
        <member name="M:LSLibrary.CRegex.GetImgSrc(System.String)">
            <summary>
            图片地址
            </summary>
            <param name="sInput">输入内容</param>
        </member>
        <member name="M:LSLibrary.CRegex.GetDomain(System.String)">
            <summary>
            根据URL获得域名
            </summary>
            <param name="sUrl">输入内容</param>
        </member>
        <member name="M:LSLibrary.CRegex.GetTitle(System.String,System.String)">
            <summary>
            文章标题
            </summary>
            <param name="sInput">输入内容</param>
            <param name="sRegex">表达式字符串</param>
        </member>
        <member name="M:LSLibrary.CRegex.GetTitle(System.String)">
            <summary>
            网页标题
            </summary>
        </member>
        <member name="M:LSLibrary.CRegex.GetHtml(System.String)">
            <summary>
            网页内容
            </summary>
            <param name="sInput">输入内容</param>
        </member>
        <member name="M:LSLibrary.CRegex.GetBody(System.String)">
            <summary>
            网页Body内容
            </summary>
        </member>
        <member name="M:LSLibrary.CRegex.GetBody(System.String,System.String)">
            <summary>
            网页Body内容
            </summary>
            <param name="sInput">输入内容</param>
            <param name="sRegex">表达式字符串</param>
        </member>
        <member name="M:LSLibrary.CRegex.GetSource(System.String,System.String)">
            <summary>
            文章来源
            </summary>
            <param name="sInput">输入内容</param>
            <param name="sRegex">表达式字符串</param>
        </member>
        <member name="M:LSLibrary.CRegex.GetAuthor(System.String,System.String)">
            <summary>
            作者名
            </summary>
            <param name="sInput">输入内容</param>
            <param name="sRegex">表达式字符串</param>
        </member>
        <member name="M:LSLibrary.CRegex.GetPageLinks(System.String,System.String)">
            <summary>
            分页链接地址
            </summary>
            <param name="sInput">输入内容</param>
            <param name="sRegex">表达式字符串</param>
        </member>
        <member name="M:LSLibrary.CRegex.GetUrl(System.String,System.String)">
            <summary>
            根据相对路径得到绝对路径
            </summary>
            <param name="sUrl">输入内容</param>
            <param name="sInput">原始网站地址</param>
            <param name="sRelativeUrl">相对链接地址</param>
        </member>
        <member name="M:LSLibrary.CRegex._GetStandardUrlDepth(System.String)">
            <summary>
            获得标准的URL路径深度
            </summary>
            <param name="url"></param>
            <returns>返回标准的形式：http://www.163.com/或http://www.163.com/news/。</returns>
        </member>
        <member name="M:LSLibrary.CRegex.GetKeyWord(System.String)">
            <summary>
            关键字
            </summary>
            <param name="sInput">输入内容</param>
        </member>
        <member name="M:LSLibrary.CRegex.GetCreateDate(System.String,System.String)">
            <summary>
            发布日期
            </summary>
            <param name="sInput">输入内容</param>
            <param name="sRegex">表达式字符串</param>
        </member>
        <member name="M:LSLibrary.CRegex._ReplaceUrl(System.String,System.String,System.String,System.String)">
            <summary>
            置换连接
            </summary>
        </member>
        <member name="T:LSLibrary.CSocket">
            <summary>
            clsPublic 的摘要说明。
            </summary>
        </member>
        <member name="M:LSLibrary.CSocket.DealWithFrame(System.String,System.String)">
            <summary>
            处理框架页面问题。如果该页面是框架结构的话，返回该框架
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.CSocket.DealWithIFrame(System.String,System.String)">
            <summary>
            处理浮动桢问题。如果该页面存在浮动桢，返回浮动桢
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="T:LSLibrary.CString">
            <summary>
            CString 的摘要说明。
            </summary>
        </member>
        <member name="M:LSLibrary.CString.TransformPrice(System.Double)">
            <summary>
            把价格精确至小数点两位
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.CString.GetLength(System.String)">
            <summary> 
            检测含有中文字符串的实际长度 
            </summary> 
            <param name="str">字符串</param> 
        </member>
        <member name="M:LSLibrary.CString.DelHtmlString(System.String)">
            <summary>
            删除所有的html标记 
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.CString.DelTag(System.String,System.String,System.Boolean)">
            <summary>
            删除字符串中的特定标记 
            </summary>
            <param name="str"></param>
            <param name="tag"></param>
            <param name="isContent">是否清除内容 </param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.CString.DelTagArray(System.String,System.String,System.Boolean)">
            <summary>
            删除字符串中的一组标记 
            </summary>
            <param name="str"></param>
            <param name="tagA"></param>
            <param name="isContent">是否清除内容 </param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.CString.SetVersionFormat(System.String)">
            <summary>
            格式化为版本号字符串
            </summary>
            <param name="sVersion"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.CString.GetSQLFildList(System.String)">
            <summary>
            格式化字符串为 SQL 语句字段
            </summary>
            <param name="fldList"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.CString.AddZero(System.Int32,System.Int32)">
            <summary>
            在前面补0
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.CString.AddZero(System.String,System.Int32)">
            <summary>
            在前面补0
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.CString.GetUniqueString">
            <summary>
            简介：获得唯一的字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.CString.GetAllURL(System.String)">
            <summary>
            取得所有链接URL
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.CString.GetAllLinkText(System.String)">
            <summary>
            获取所有连接文本
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="T:LSLibrary.CSVHelper">
            <summary>
            CSV文件和DataTable对象转换辅助类
            </summary>
        </member>
        <member name="M:LSLibrary.CSVHelper.CSVToDataTableByOledb(System.String)">
            <summary>
            CSV转换成DataTable（OleDb数据库访问方式）
            </summary>
            <param name="csvPath">csv文件路径</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.CSVHelper.CSVToDataTableByStreamReader(System.String)">
            <summary>
            CSV转换成DataTable（文件流方式）
            </summary>
            <param name="csvPath">csv文件路径</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.CSVHelper.DataTableToCSV(System.Data.DataTable,System.String)">
            <summary>
            DataTable 生成 CSV
            </summary>
            <param name="dt">DataTable</param>
            <param name="csvPath">csv文件路径</param>
        </member>
        <member name="M:LSLibrary.CText.GetLinks(System.String,System.String)">
            <summary>
            获取所有有效链接，过滤广告
            </summary>
            <param name="sContent"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.CText.GetLinksByKey(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String})">
            <summary>
            在现有链接中用关键字过滤
            </summary>
            <param name="listA"></param>
            <param name="listKey"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.CText.GetLinksFromRss(System.String,System.String)">
            <summary>
            从RSS FEED中读取
            </summary>
            <param name="sContent"></param>
            <param name="listKey"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.CText.GetLinksByKeyFromRss(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            从RSS FEED中读取
            </summary>
            <param name="sContent"></param>
            <param name="listKey"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.CText.GetUrlByRelative(System.String,System.String)">
            <summary>
            获得链接的绝对路径
            </summary>
            <param name="sUrl"></param>
            <param name="sRUrl"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.CText.GetTxtFromHtml2(System.String)">
            <summary>
            和GetTxtFromHtml功能一样，不过保留换行符号
            </summary>
            <param name="sHtml"></param>
            <returns></returns>
        </member>
        <member name="T:LSLibrary.DatabaseInfo">
            <summary>
            DatabaseInfo 的摘要说明。
            </summary>
        </member>
        <member name="M:LSLibrary.DatabaseInfo.#ctor(System.String)">
            <summary>
            可以接受三种格式的数据库连接字符串
            1. 服务名称=(local);数据库名称=EDNSM;用户名称=sa;用户密码=123456
            2. Data Source=(local);Initial Catalog=EDNSM;User ID=sa;Password=123456
            3. server=(local);uid=sa;pwd=;
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="P:LSLibrary.DatabaseInfo.EncryptConnectionString">
            <summary>
            加密后的连接字符串
            </summary>
        </member>
        <member name="P:LSLibrary.DatabaseInfo.ConnectionString">
            <summary>
            没有加密的字符串
            </summary>
        </member>
        <member name="P:LSLibrary.DatabaseInfo.OleDbConnectionString">
            <summary>
            提供OLEDB数据源的链接字符串
            </summary>
        </member>
        <member name="M:LSLibrary.DatabaseInfo.GetSubItemValue(System.String,System.String)">
            <summary>
            获取给定字符串中的子节点的值, 如果不存在返回Null
            </summary>
            <param name="itemValueString">多个值的字符串</param>
            <param name="subKeyName"></param>
            <returns></returns>
        </member>
        <member name="T:LSLibrary.DataTableHelper">
            <summary>
            DataTable帮助类
            </summary>
        </member>
        <member name="M:LSLibrary.DataTableHelper.AddIdentityColumn(System.Data.DataTable)">
            <summary>
            给DataTable增加一个自增列
            如果DataTable 存在 identityid 字段  则 直接返回DataTable 不做任何处理
            </summary>
            <param name="dt">DataTable</param>
            <returns>返回Datatable 增加字段 identityid </returns>
        </member>
        <member name="M:LSLibrary.DataTableHelper.IsHaveRows(System.Data.DataTable)">
            <summary>
            检查DataTable 是否有数据行
            </summary>
            <param name="dt">DataTable</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DataTableHelper.DataTableToList``1(System.Data.DataTable)">
            <summary>
            DataTable转换成实体列表
            </summary>
            <typeparam name="T">实体 T </typeparam>
            <param name="table">datatable</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DataTableHelper.ListToDataTable``1(System.Collections.Generic.IList{``0})">
            <summary>
            实体列表转换成DataTable
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="list"> 实体列表</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DataTableHelper.ToDataTable``1(System.Collections.Generic.IList{``0})">
            <summary>
            将泛型集合类转换成DataTable
            </summary>
            <typeparam name="T">集合项类型</typeparam>
            <param name="list">集合</param>
            <returns>数据集(表)</returns>
        </member>
        <member name="M:LSLibrary.DataTableHelper.ToDataTable``1(System.Collections.Generic.IList{``0},System.String[])">
            <summary>
            将泛型集合类转换成DataTable
            </summary>
            <typeparam name="T">集合项类型</typeparam>
            <param name="list">集合</param>
            <param name="propertyName">需要返回的列的列名</param>
            <returns>数据集(表)</returns>
        </member>
        <member name="M:LSLibrary.DataTableHelper.CreateTable(System.Collections.Generic.List{System.String})">
            <summary>
            根据nameList里面的字段创建一个表格,返回该表格的DataTable
            </summary>
            <param name="nameList">包含字段信息的列表</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:LSLibrary.DataTableHelper.CreateTable(System.String)">
            <summary>
            通过字符列表创建表字段，字段格式可以是：
            1) a,b,c,d,e
            2) a|int,b|string,c|bool,d|decimal
            </summary>
            <param name="nameString"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DataTableHelper.GetDataRowArray(System.Data.DataRowCollection)">
            <summary>
            获得从DataRowCollection转换成的DataRow数组
            </summary>
            <param name="drc">DataRowCollection</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DataTableHelper.GetTableFromRows(System.Data.DataRow[])">
            <summary>
            将DataRow数组转换成DataTable，注意行数组的每个元素须具有相同的数据结构，
            否则当有元素长度大于第一个元素时，抛出异常
            </summary>
            <param name="rows">行数组</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DataTableHelper.SortedTable(System.Data.DataTable,System.String[])">
            <summary>
            排序表的视图
            </summary>
            <param name="dt"></param>
            <param name="sorts"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DataTableHelper.FilterDataTable(System.Data.DataTable,System.String)">
            <summary>
            根据条件过滤表的内容
            </summary>
            <param name="dt"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DateTimeHelper.GetWeekAmount(System.Int32)">
            <summary>
            获取某一年有多少周
            </summary>
            <param name="year">年份</param>
            <returns>该年周数</returns>
        </member>
        <member name="M:LSLibrary.DateTimeHelper.WeekOfYear(System.DateTime)">
            <summary>
            返回年度第几个星期   默认星期日是第一天
            </summary>
            <param name="date">时间</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DateTimeHelper.WeekOfYear(System.DateTime,System.DayOfWeek)">
            <summary>
            返回年度第几个星期
            </summary>
            <param name="date">时间</param>
            <param name="week">一周的开始日期</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DateTimeHelper.GetWeekTime(System.Int32,System.Int32,System.DateTime@,System.DateTime@)">
            <summary>
            得到一年中的某周的起始日和截止日
            年 nYear
            周数 nNumWeek
            周始 out dtWeekStart
            周终 out dtWeekeEnd
            </summary>
            <param name="nYear">年份</param>
            <param name="nNumWeek">第几周</param>
            <param name="dtWeekStart">开始日期</param>
            <param name="dtWeekeEnd">结束日期</param>
        </member>
        <member name="M:LSLibrary.DateTimeHelper.GetWeekWorkTime(System.Int32,System.Int32,System.DateTime@,System.DateTime@)">
            <summary>
            得到一年中的某周的起始日和截止日    周一到周五  工作日
            </summary>
            <param name="nYear">年份</param>
            <param name="nNumWeek">第几周</param>
            <param name="dtWeekStart">开始日期</param>
            <param name="dtWeekeEnd">结束日期</param>
        </member>
        <member name="M:LSLibrary.DateTimeHelper.SetLocalTime(System.DateTime)">
            <summary>
            设置本地计算机时间
            </summary>
            <param name="dt">DateTime对象</param>
        </member>
        <member name="M:LSLibrary.DateTimeHelper.GetInt(System.String,System.Boolean)">
            <summary>
            从指定的字符串中获取整数
            </summary>
            <param name="origin">原始的字符串</param>
            <param name="fullMatch">是否完全匹配，若为false，则返回字符串中的第一个整数数字</param>
            <returns>整数数字</returns>
        </member>
        <member name="M:LSLibrary.DateTimeHelper.GetTheDay(System.Nullable{System.Int32})">
            <summary>
            哪天
            </summary>
            <param name="days">7天前:-7 7天后:+7</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DateTimeHelper.GetSunday(System.Nullable{System.Int32})">
            <summary>
            周日
            </summary>
            <param name="weeks">上周-1 下周+1 本周0</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DateTimeHelper.GetSaturday(System.Nullable{System.Int32})">
            <summary>
            周六
            </summary>
            <param name="weeks">上周-1 下周+1 本周0</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DateTimeHelper.GetFirstDayOfMonth(System.Nullable{System.Int32})">
            <summary>
            月第一天
            </summary>
            <param name="months">上月-1 本月0 下月1</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DateTimeHelper.GetLastDayOfMonth(System.Nullable{System.Int32})">
            <summary>
            月最后一天
            </summary>
            <param name="months">上月0 本月1 下月2</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DateTimeHelper.GetFirstDayOfYear(System.Nullable{System.Int32})">
            <summary>
            年度第一天
            </summary>
            <param name="years">上年度-1 下年度+1</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DateTimeHelper.GetLastDayOfYear(System.Nullable{System.Int32})">
            <summary>
            年度最后一天
            </summary>
            <param name="years">上年度0 本年度1 下年度2</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DateTimeHelper.GetFirstDayOfQuarter(System.Nullable{System.Int32})">
            <summary>
            季度第一天
            </summary>
            <param name="quarters">上季度-1 下季度+1</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DateTimeHelper.GetLastDayOfQuarter(System.Nullable{System.Int32})">
            <summary>
            季度最后一天
            </summary>
            <param name="quarters">上季度0 本季度1 下季度2</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DateTimeHelper.GetDayOfWeekCN">
            <summary>
            中文星期
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DateTimeHelper.GetDayOfWeekNum">
            <summary>
            获取星期数字形式,周一开始
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DateTimeHelper.ConvertTimeToJS(System.DateTime)">
            <summary>
            C#的时间到Javascript的时间的转换
            </summary>
            <param name="TheDate"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DateTimeHelper.ConvertPHPToTime(System.Int64)">
            <summary>
            PHP的时间转换成C#中的DateTime
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DateTimeHelper.ConvertTimeToPHP(System.DateTime)">
            <summary>
             C#中的DateTime转换成PHP的时间
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DateTimeHelper.GetDiffTime(System.DateTime,System.DateTime,System.Int32@)">
            <summary>
            计算2个时间差
            </summary>
            <param name="beginTime">开始时间</param>
            <param name="endTime">结束时间</param>
            <returns></returns>
        </member>
        <member name="T:LSLibrary.MouseHelper">
            <summary>
            模拟鼠标点击
            </summary>
        </member>
        <member name="P:LSLibrary.MouseHelper.MousePresent">
            <summary>
            检查鼠标是否已经安装.
            </summary>
        </member>
        <member name="P:LSLibrary.MouseHelper.WheelExists">
            <summary>
            检查鼠标是否存在滚轮
            </summary>
        </member>
        <member name="P:LSLibrary.MouseHelper.WheelScrollLines">
            <summary>
            获取鼠标滚轮每次滚动的行数
            </summary>
        </member>
        <member name="M:LSLibrary.MouseHelper.GetDoubleClickTime">
            <summary>
            连续两次鼠标单击之间会被处理成双击事件的间隔时间。
            </summary>
            <returns>以毫秒表示的双击时间</returns>
        </member>
        <member name="M:LSLibrary.MouseHelper.GetCursorPos(System.Drawing.Point)">
            <summary>
            检取光标的位置，以屏幕坐标表示。
            </summary>
            <param name="lpPoint">POINT结构指针，该结构接收光标的屏幕坐标。</param>
            <returns>如果成功，返回值非零；如果失败，返回值为零。</returns>
        </member>
        <member name="M:LSLibrary.MouseHelper.SetCursorPos(System.Int32,System.Int32)">
            <summary>
            把光标移到屏幕的指定位置。如果新位置不在由 ClipCursor函数设置的屏幕矩形区域之内，则系统自动调整坐标，使得光标在矩形之内。
            </summary>
            <param name="x">指定光标的新的X坐标，以屏幕坐标表示。</param>
            <param name="y">指定光标的新的Y坐标，以屏幕坐标表示。</param>
            <returns>如果成功，返回非零值；如果失败，返回值是零</returns>
        </member>
        <member name="M:LSLibrary.MouseHelper.MouseClick">
            <summary>
            在当前鼠标的位置左键点击一下
            </summary>
        </member>
        <member name="M:LSLibrary.MouseHelper.MouseClick(System.Drawing.Point)">
            <summary>
            移动到坐标位置点击
            </summary>
            <param name="location">要点击的坐标位置,屏幕绝对值</param>
        </member>
        <member name="M:LSLibrary.MouseHelper.MouseRightClick(System.Drawing.Point)">
            <summary>
            移动到坐标位置点击
            </summary>
            <param name="location">要点击的坐标位置,屏幕绝对值</param>
        </member>
        <member name="M:LSLibrary.MouseHelper.MouseMove(System.Drawing.Point)">
            <summary>
            移动到坐标位置
            </summary>
        </member>
        <member name="T:LSLibrary.DirectoryUtil">
            <summary>
            常用的目录操作辅助类
            </summary>
        </member>
        <member name="M:LSLibrary.DirectoryUtil.IsWriteable(System.String)">
             <summary>
            检查目录是否可写，如果可以，返回True，否则False
             </summary>
             <param name="path"></param>
             <returns></returns>
        </member>
        <member name="M:LSLibrary.DirectoryUtil.IsDiskSpaceEnough(System.String,System.UInt64)">
            <summary>
            检查磁盘是否有足够的可用空间
            </summary>
            <param name="path"></param>
            <param name="requiredSpace"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DirectoryUtil.GetFreeSpace(System.String)">
            <summary>
            获取驱动盘符的可用空间大小
            </summary>
            <param name="driveName">Direve name</param>
            <returns>free space (byte)</returns>
        </member>
        <member name="M:LSLibrary.DirectoryUtil.GetFileNames(System.String)">
            <summary>
            获取指定目录中所有文件列表
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
        </member>
        <member name="M:LSLibrary.DirectoryUtil.GetFileNames(System.String,System.String,System.Boolean)">
            <summary>
            获取指定目录及子目录中所有文件列表
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>
            <param name="isSearchChild">是否搜索子目录</param>
        </member>
        <member name="M:LSLibrary.DirectoryUtil.GetDirectories(System.String)">
            <summary>
            获取指定目录中所有子目录列表,若要搜索嵌套的子目录列表,请使用重载方法.
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
        </member>
        <member name="M:LSLibrary.DirectoryUtil.GetDirectories(System.String,System.String,System.Boolean)">
            <summary>
            获取指定目录及子目录中所有子目录列表
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>
            <param name="isSearchChild">是否搜索子目录</param>
        </member>
        <member name="M:LSLibrary.DirectoryUtil.CreateDirectoryByDate(System.String)">
            <summary>
            生成日期 文件夹    格式：yyyy\mm\dd
            </summary>
            <remarks>
            生成时间目录   返回 例如： c:\directory\2009\03\01
            </remarks>
            <param name="rootPath">绝对路径   [在此目录下建日期目录]</param>
            <returns>返回完整路径  </returns>
        </member>
        <member name="M:LSLibrary.DirectoryUtil.CreateDirectoryByDate(System.String,System.String)">
            <summary>
            相应格式生成日期目录
            </summary>
            <remarks>
            formatString:
                         yyyy-MM-dd        :2009\03\01
                         yyyy-MM-dd-HH     :2009\03\01\01
            </remarks>
            <param name="rootPath">绝对路径   [在此目录下建日期目录]</param>
            <param name="formatString">格式</param>
            <returns>返回完整路径 </returns>
        </member>
        <member name="M:LSLibrary.DirectoryUtil.AssertDirExist(System.String)">
            <summary>
            确保文件夹被创建
            </summary>
            <param name="filePath">文件夹全名（含路径）</param>
        </member>
        <member name="M:LSLibrary.DirectoryUtil.IsExistDirectory(System.String)">
            <summary>
            检测指定目录是否存在
            </summary>
            <param name="directoryPath">目录的绝对路径</param>
        </member>
        <member name="M:LSLibrary.DirectoryUtil.IsEmptyDirectory(System.String)">
            <summary>
            检测指定目录是否为空
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
        </member>
        <member name="M:LSLibrary.DirectoryUtil.ContainFile(System.String,System.String)">
            <summary>
            检测指定目录中是否存在指定的文件,若要搜索子目录请使用重载方法.
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>
        </member>
        <member name="M:LSLibrary.DirectoryUtil.ContainFile(System.String,System.String,System.Boolean)">
            <summary>
            检测指定目录中是否存在指定的文件
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>
            <param name="isSearchChild">是否搜索子目录</param>
        </member>
        <member name="M:LSLibrary.DirectoryUtil.CreateDirectory(System.String)">
            <summary>
            创建一个目录
            </summary>
            <param name="directoryPath">目录的绝对路径</param>
        </member>
        <member name="M:LSLibrary.DirectoryUtil.ClearDirectory(System.String)">
            <summary>
            清空指定目录下所有文件及子目录,但该目录依然保存.
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
        </member>
        <member name="M:LSLibrary.DirectoryUtil.DeleteDirectory(System.String)">
            <summary>
            删除指定目录及其所有子目录
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
        </member>
        <member name="M:LSLibrary.DirectoryUtil.GetSystemDirectory">
            <summary>
            取系统目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DirectoryUtil.GetSpeicalFolder(System.Environment.SpecialFolder)">
            <summary>
            取系统的特别目录
            </summary>
            <param name="folderType"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DirectoryUtil.GetTempPath">
            <summary>
            返回当前系统的临时目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DirectoryUtil.GetCurrentDirectory">
            <summary>
            取当前目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DirectoryUtil.SetCurrentDirectory(System.String)">
            <summary>
            设当前目录
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:LSLibrary.DirectoryUtil.GetInvalidPathChars">
            <summary>
            取路径中不充许存在的字符
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.DirectoryUtil.GetAllDrives">
            <summary>
            取系统所有的逻辑驱动器
            </summary>
            <returns></returns>
        </member>
        <member name="T:LSLibrary.Base64Util">
            <summary>
            基于Base64的加密编码，
            可以设置不同的密码表来获取不同的编码合解码
            </summary>
        </member>
        <member name="M:LSLibrary.Base64Util.Encrypt(System.String)">
            <summary>
            使用默认的密码表加密字符串
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.Base64Util.Decrypt(System.String)">
            <summary>
            使用默认的密码表解密字符串
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.Base64Util.GetStandardBase64">
            <summary>
            获取具有标准的Base64密码表的加密类
            </summary>
            <returns></returns>
        </member>
        <member name="P:LSLibrary.Base64Util.CodeTable">
            <summary>
            密码表
            </summary>
        </member>
        <member name="P:LSLibrary.Base64Util.Pad">
            <summary>
            补码
            </summary>
        </member>
        <member name="M:LSLibrary.Base64Util.Encode(System.String)">
            <summary>
            返回编码后的字符串
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.Base64Util.Decode(System.String)">
            <summary>
            获得解码字符串
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.Base64Util.InitDict">
            <summary>
            初始化双向哈西字典
            </summary>
        </member>
        <member name="M:LSLibrary.Base64Util.ValidateRepeat(System.String)">
            <summary>
            检查字符串中的字符是否有重复
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.Base64Util.ValidateEqualPad(System.String,System.String)">
            <summary>
            检查字符串是否包含补码字符
            </summary>
            <param name="input"></param>
            <param name="pad"></param>
        </member>
        <member name="T:LSLibrary.EncodeHelper">
            <summary>
            DES对称加解密、AES RijndaelManaged加解密、Base64加密解密、MD5加密等操作辅助类
            </summary>
        </member>
        <member name="M:LSLibrary.EncodeHelper.DesEncrypt(System.String)">
            <summary>
            使用默认加密
            </summary>
            <param name="strText"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.EncodeHelper.DesDecrypt(System.String)">
            <summary>
            使用默认解密
            </summary>
            <param name="strText"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.EncodeHelper.DesEncrypt(System.String,System.String)">
            <summary> 
            加密字符串
            注意：密钥必须是8位
            </summary> 
            <param name="strText">string</param> 
            <param name="strEncrKey">key</param> 
            <returns></returns> 
        </member>
        <member name="M:LSLibrary.EncodeHelper.DesDecrypt(System.String,System.String)">
            <summary> 
            解密字符串
            注意：密钥必须是8位
            </summary> 
            <param name="strText">解密字符串</param> 
            <param name="sDecrKey">key</param> 
            <returns>输出字符串</returns> 
        </member>
        <member name="M:LSLibrary.EncodeHelper.DesEncrypt(System.String,System.String,System.String)">
            <summary> 
            加密文件
            注意：密钥必须是8位
            </summary> 
            <param name="m_InFilePath">加密文件的路径</param> 
            <param name="m_OutFilePath">输出文件</param> 
            <param name="strEncrKey">key</param> 
        </member>
        <member name="M:LSLibrary.EncodeHelper.DesDecrypt(System.String,System.String,System.String)">
            <summary> 
            解密文件
            注意：密钥必须是8位
            </summary> 
            <param name="m_InFilePath">解密文件路径</param> 
            <param name="m_OutFilePath">输出文件路径</param> 
            <param name="sDecrKey">key</param> 
        </member>
        <member name="M:LSLibrary.EncodeHelper.AES_Encrypt(System.String)">
            <summary>
            对称加密算法AES RijndaelManaged加密(RijndaelManaged（AES）算法是块式加密算法)
            </summary>
            <param name="encryptString">待加密字符串</param>
            <returns>加密结果字符串</returns>
        </member>
        <member name="M:LSLibrary.EncodeHelper.AES_Encrypt(System.String,System.String)">
            <summary>
            对称加密算法AES RijndaelManaged加密(RijndaelManaged（AES）算法是块式加密算法)
            </summary>
            <param name="encryptString">待加密字符串</param>
            <param name="encryptKey">加密密钥，须半角字符</param>
            <returns>加密结果字符串</returns>
        </member>
        <member name="M:LSLibrary.EncodeHelper.AES_Decrypt(System.String)">
            <summary>
            对称加密算法AES RijndaelManaged解密字符串
            </summary>
            <param name="decryptString">待解密的字符串</param>
            <returns>解密成功返回解密后的字符串,失败返源串</returns>
        </member>
        <member name="M:LSLibrary.EncodeHelper.AES_Decrypt(System.String,System.String)">
            <summary>
            对称加密算法AES RijndaelManaged解密字符串
            </summary>
            <param name="decryptString">待解密的字符串</param>
            <param name="decryptKey">解密密钥,和加密密钥相同</param>
            <returns>解密成功返回解密后的字符串,失败返回空</returns>
        </member>
        <member name="M:LSLibrary.EncodeHelper.GetSubString(System.String,System.Int32,System.String)">
            <summary>
            按字节长度(按字节,一个汉字为2个字节)取得某字符串的一部分
            </summary>
            <param name="sourceString">源字符串</param>
            <param name="length">所取字符串字节长度</param>
            <param name="tailString">附加字符串(当字符串不够长时，尾部所添加的字符串，一般为"...")</param>
            <returns>某字符串的一部分</returns>
        </member>
        <member name="M:LSLibrary.EncodeHelper.GetSubString(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            按字节长度(按字节,一个汉字为2个字节)取得某字符串的一部分
            </summary>
            <param name="sourceString">源字符串</param>
            <param name="startIndex">索引位置，以0开始</param>
            <param name="length">所取字符串字节长度</param>
            <param name="tailString">附加字符串(当字符串不够长时，尾部所添加的字符串，一般为"...")</param>
            <returns>某字符串的一部分</returns>
        </member>
        <member name="M:LSLibrary.EncodeHelper.AES_EncryptStrream(System.IO.FileStream,System.String)">
            <summary>
            加密文件流
            </summary>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.EncodeHelper.AES_DecryptStream(System.IO.FileStream,System.String)">
            <summary>
            解密文件流
            </summary>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.EncodeHelper.AES_EncryptFile(System.String,System.String)">
            <summary>
            对指定文件加密
            </summary>
            <param name="InputFile"></param>
            <param name="OutputFile"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.EncodeHelper.AES_DecryptFile(System.String,System.String)">
            <summary>
            对指定的文件解压缩
            </summary>
            <param name="InputFile"></param>
            <param name="OutputFile"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.EncodeHelper.Base64Encrypt(System.String)">
            <summary>
            Base64是一種使用64基的位置計數法。它使用2的最大次方來代表僅可列印的ASCII 字元。
            這使它可用來作為電子郵件的傳輸編碼。在Base64中的變數使用字元A-Z、a-z和0-9 ，
            這樣共有62個字元，用來作為開始的64個數字，最後兩個用來作為數字的符號在不同的
            系統中而不同。
            Base64加密
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.EncodeHelper.Base64Decrypt(System.String)">
            <summary>
            Base64解密
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.EncodeHelper.MD5Encrypt(System.String)">
            <summary> 
            MD5 Encrypt 
            </summary> 
            <param name="strText">text</param> 
            <returns>md5 Encrypt string</returns> 
        </member>
        <member name="M:LSLibrary.EncodeHelper.EncyptMD5_3_16(System.String)">
            <summary>
            MD5 三次加密算法.计算过程: (QQ使用)
            1. 验证码转为大写
            2. 将密码使用这个方法进行三次加密后,与验证码进行叠加
            3. 然后将叠加后的内容再次MD5一下,得到最终验证码的值
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.EncodeHelper.SHA256(System.String)">
            <summary>
            SHA256函数
            </summary>
            <param name="str">原始字符串</param>
            <returns>SHA256结果(返回长度为44字节的字符串)</returns>
        </member>
        <member name="M:LSLibrary.EncodeHelper.EncryptString(System.String)">
            <summary>
            加密字符串
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.EncodeHelper.DecryptString(System.String,System.Boolean)">
            <summary>
            解密加过密的字符串
            </summary>
            <param name="input"></param>
            <param name="throwException">解密失败是否抛异常</param>
            <returns></returns>
        </member>
        <member name="T:LSLibrary.MD5Util">
            <summary>
            MD5各种长度加密字符、验证MD5等操作辅助类
            </summary>
        </member>
        <member name="M:LSLibrary.MD5Util.GetMD5_32(System.String)">
            <summary>
            获得32位的MD5加密
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.MD5Util.GetMD5_16(System.String)">
            <summary>
            获得16位的MD5加密
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.MD5Util.GetMD5_8(System.String)">
            <summary>
            获得8位的MD5加密
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.MD5Util.GetMD5_4(System.String)">
            <summary>
            获得4位的MD5加密
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.MD5Util.AddMD5Profix(System.String)">
            <summary>
            添加MD5的前缀，便于检查有无篡改
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.MD5Util.RemoveMD5Profix(System.String)">
            <summary>
            移除MD5的前缀
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.MD5Util.ValidateValue(System.String)">
            <summary>
            验证MD5前缀处理的字符串有无被篡改
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.MD5Util.AddMD5(System.String)">
            <summary>
            对给定文件路径的文件加上标签
            </summary>
            <param name="path">要加密的文件的路径</param>
            <returns>标签的值</returns>
        </member>
        <member name="M:LSLibrary.MD5Util.CheckMD5(System.String)">
            <summary>
            对给定路径的文件进行验证
            </summary>
            <param name="path"></param>
            <returns>是否加了标签或是否标签值与内容值一致</returns>
        </member>
        <member name="M:LSLibrary.MD5Util.MD5Buffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            计算文件的MD5值
            </summary>
            <param name="MD5File">MD5签名文件字符数组</param>
            <param name="index">计算起始位置</param>
            <param name="count">计算终止位置</param>
            <returns>计算结果</returns>
        </member>
        <member name="T:LSLibrary.EnumHelper">
            <summary>
            枚举操作公共类
            </summary>
        </member>
        <member name="M:LSLibrary.EnumHelper.GetInstance``1(System.String)">
            <summary>
            通过字符串获取枚举成员实例
            </summary>
            <typeparam name="T">枚举名,比如Enum1</typeparam>
            <param name="member">枚举成员的常量名或常量值,
            范例:Enum1枚举有两个成员A=0,B=1,则传入"A"或"0"获取 Enum1.A 枚举类型</param>
        </member>
        <member name="M:LSLibrary.EnumHelper.GetMemberKeyValue``1">
            <summary>
            获取枚举成员名称和成员值的键值对集合
            </summary>
            <typeparam name="T">枚举名,比如Enum1</typeparam>
        </member>
        <member name="M:LSLibrary.EnumHelper.GetMemberNames``1">
            <summary>
            获取枚举所有成员名称
            </summary>
            <typeparam name="T">枚举名,比如Enum1</typeparam>
        </member>
        <member name="M:LSLibrary.EnumHelper.GetMemberName``1(System.Object)">
            <summary>
            获取枚举成员的名称
            </summary>
            <typeparam name="T">枚举名,比如Enum1</typeparam>
            <param name="member">枚举成员实例或成员值,
            范例:Enum1枚举有两个成员A=0,B=1,则传入Enum1.A或0,获取成员名称"A"</param>
        </member>
        <member name="M:LSLibrary.EnumHelper.GetMemberValues``1">
            <summary>
            获取枚举所有成员值
            </summary>
            <typeparam name="T">枚举名,比如Enum1</typeparam>
        </member>
        <member name="M:LSLibrary.EnumHelper.GetMemberValue``1(System.String)">
            <summary>
            获取枚举成员的值
            </summary>
            <typeparam name="T">枚举名,比如Enum1</typeparam>
            <param name="memberName">枚举成员的常量名,
            范例:Enum1枚举有两个成员A=0,B=1,则传入"A"获取0</param>
        </member>
        <member name="M:LSLibrary.EnumHelper.GetUnderlyingType(System.Type)">
            <summary>
            获取枚举的基础类型
            </summary>
            <param name="enumType">枚举类型</param>
        </member>
        <member name="M:LSLibrary.EnumHelper.IsDefined``1(System.String)">
            <summary>
            检测枚举是否包含指定成员
            </summary>
            <typeparam name="T">枚举名,比如Enum1</typeparam>
            <param name="member">枚举成员名或成员值</param>
        </member>
        <member name="M:LSLibrary.EnumHelper.GetDescription(System.Type,System.Object)">
            <summary>
            返回指定枚举类型的指定值的描述
            </summary>
            <param name="t">枚举类型</param>
            <param name="v">枚举值</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ExtensionAttachUtil.SaveReg(System.String,System.String)">
            <summary>
            关联文件
            </summary>
            <param name="_FilePathString">应用程序路径</param>
            <param name="p_FileTypeName">文件类型</param>
        </member>
        <member name="M:LSLibrary.ExtensionAttachUtil.DelReg(System.String)">
            <summary>
            取消文件关联
            </summary>
            <param name="p_FileTypeName">文件类型</param>
        </member>
        <member name="T:LSLibrary.FileDialogHelper">
            <summary>
            打开、保存文件对话框操作辅助类
            </summary>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LSLibrary.FileDialogHelper"/> class.
            </summary>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.OpenText">
            <summary>
            打开Txt对话框
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.SaveText">
            <summary>
            保存Excel对话框,并返回保存全路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.SaveText(System.String)">
            <summary>
            保存Excel对话框,并返回保存全路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.SaveText(System.String,System.String)">
            <summary>
            保存Excel对话框,并返回保存全路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.OpenExcel">
            <summary>
            打开Excel对话框
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.SaveExcel">
            <summary>
            保存Excel对话框,并返回保存全路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.SaveExcel(System.String)">
            <summary>
            保存Excel对话框,并返回保存全路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.SaveExcel(System.String,System.String)">
            <summary>
            保存Excel对话框,并返回保存全路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.OpenHtml">
            <summary>
            打开Html对话框
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.SaveHtml">
            <summary>
            保存Html对话框,并返回保存全路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.SaveHtml(System.String)">
            <summary>
            保存Html对话框,并返回保存全路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.SaveHtml(System.String,System.String)">
            <summary>
            保存Html对话框,并返回保存全路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.OpenZip">
            <summary>
            Opens the Zip.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.OpenZip(System.String)">
            <summary>
            Opens the Zip.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.SaveZip">
            <summary>
            Save the Zip
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.SaveZip(System.String)">
            <summary>
            Save the Zip
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.SaveZip(System.String,System.String)">
            <summary>
            Save the Zip
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.OpenImage">
            <summary>
            Opens the image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.SaveImage">
            <summary>
            保存图片对话框,并返回保存全路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.SaveImage(System.String)">
            <summary>
            保存图片对话框并设置默认文件名,并返回保存全路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.SaveImage(System.String,System.String)">
            <summary>
            保存图片对话框并设置默认文件名,并返回保存全路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.SaveAccessDb">
            <summary>
            保存数据库备份对话框
            </summary>
            <returns>数据库备份路径</returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.OpenAccessDb">
            <summary>
            数据库还原对话框
            </summary>
            <returns>数据库还原路径</returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.SaveConfig">
            <summary>
            保存配置文件备份对话框
            </summary>
            <returns>配置文件备份路径</returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.OpenConfig">
            <summary>
            配置文件还原对话框
            </summary>
            <returns>配置文件还原路径</returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.Open(System.String,System.String,System.String)">
            <summary>
            Opens the specified title.
            </summary>
            <param name="title">The title.</param>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.Open(System.String,System.String)">
            <summary>
            Opens the specified title.
            </summary>
            <param name="title">The title.</param>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.Save(System.String,System.String,System.String)">
            <summary>
            Saves the specified tile.
            </summary>
            <param name="tile">The tile.</param>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.Save(System.String,System.String,System.String,System.String)">
            <summary>
            Saves the specified tile.
            </summary>
            <param name="tile">The tile.</param>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.FileDialogHelper.Save(System.String,System.String)">
            <summary>
            Saves the specified tile.
            </summary>
            <param name="tile">The tile.</param>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="T:LSLibrary.FingerprintHelper">
            <summary>
            提供用户硬件唯一信息的辅助类
            </summary>
        </member>
        <member name="T:LSLibrary.GZipUtil">
            <summary>
            压缩文本、字节或者文件的压缩辅助类
            </summary>
        </member>
        <member name="M:LSLibrary.GZipUtil.Compress(System.String)">
            <summary>
            压缩字符串
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.GZipUtil.Uncompress(System.String)">
            <summary>
            解压字符串
            </summary>
            <param name="compressedText"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.GZipUtil.Compress(System.Byte[])">
            <summary>
            压缩字节
            </summary>
            <param name="bytData"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.GZipUtil.Decompress(System.Byte[])">
            <summary>
            解压字节
            </summary>
            <param name="bytData"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.GZipUtil.ObjectToGZip(System.Object)">
            <summary>
            压缩Object对象到字节数组
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.GZipUtil.GZipToObject(System.Byte[])">
            <summary>
            从压缩的字节数组转换到Object对象
            </summary>
            <param name="byteArray"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.GZipUtil.CompressFile(System.String,System.String)">
            <summary>
            压缩文件
            </summary>
            <param name="sourceFile">源文件</param>
            <param name="destinationFile">目标文件</param>
        </member>
        <member name="M:LSLibrary.GZipUtil.DecompressFile(System.String,System.String)">
            <summary>
            解压文件
            </summary>
            <param name="sourceFile">源文件</param>
            <param name="destinationFile">目标文件</param>
        </member>
        <member name="M:LSLibrary.GZipUtil.Exists">
            <summary>
            是否安装了Winrar
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.GZipUtil.CompressRAR(System.String,System.String,System.String)">
            <summary>
            打包成Rar
            </summary>
            <param name="patch"></param>
            <param name="rarPatch"></param>
            <param name="rarName"></param>
        </member>
        <member name="M:LSLibrary.GZipUtil.UnCompressRAR(System.String,System.String,System.String)">
            <summary>
            解压
            </summary>
            <param name="unRarPatch">解压缩到</param>
            <param name="rarPatch">RAR文件所在路径</param>
            <param name="rarName">RAR文件名</param>
            <returns></returns>
        </member>
        <member name="T:LSLibrary.HardwareInfoHelper">
            <summary>
            HardDiskVal 的摘要说明。
            读取指定盘符的硬盘序列号
            功能：读取指定盘符的硬盘序列号
            </summary>
        </member>
        <member name="M:LSLibrary.HardwareInfoHelper.HDVal(System.String)">
            <summary>
            获得盘符为drvID的硬盘序列号，缺省为C
            </summary>
            <param name="drvID"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.HardwareInfoHelper.GetDiskID">
            <summary>
            获取硬盘ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.HardwareInfoHelper.GetCPUId">
            <summary>
            获取CPU的ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.HardwareInfoHelper.GetCPUName">
            <summary>
            获取CPU的名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.HardwareInfoHelper.GetUSBDriveLetters">
            <summary>
            返回一个列表连接到电脑的USB存储设备的驱动器字母。
            盘符格式的格式X的是：
            </summary>
            <returns>USB驱动器字母名单</returns>
        </member>
        <member name="M:LSLibrary.HardwareInfoHelper.GetMacAddress">
            <summary>
            获取MAC地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.HardwareInfoHelper.GetIPAddress">
            <summary>
            获取IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.HardwareInfoHelper.GetUserName">
            <summary>
            获取操作系统的登录用户名
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.HardwareInfoHelper.GetComputerName">
            <summary>
            获取计算机名
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.HardwareInfoHelper.GetSystemType">
            <summary>
            获取PC类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.HardwareInfoHelper.GetTotalPhysicalMemory">
            <summary>
            获取物理内存
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.HardwareInfoHelper.GetHDInfo(System.Byte)">
            <summary>
            获得硬盘信息
            </summary>
        </member>
        <member name="F:LSLibrary.HardwareInfoHelper.HardDiskInfo.ModuleNumber">
            <summary>
            型号
            </summary>
        </member>
        <member name="F:LSLibrary.HardwareInfoHelper.HardDiskInfo.Firmware">
            <summary>
            固件版本
            </summary>
        </member>
        <member name="F:LSLibrary.HardwareInfoHelper.HardDiskInfo.SerialNumber">
            <summary>
            序列号
            </summary>
        </member>
        <member name="F:LSLibrary.HardwareInfoHelper.HardDiskInfo.Capacity">
            <summary>
            容量，以M为单位
            </summary>
        </member>
        <member name="M:LSLibrary.HardwareInfoHelper.GetHddInfo9x(System.Byte)">
            <summary>
            获取9X架构的硬盘信息
            </summary>
            <param name="driveIndex"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.HardwareInfoHelper.GetHddInfoNT(System.Byte)">
            <summary>
            获取NT架构的硬盘信息
            </summary>
            <param name="driveIndex"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.HardwareInfoHelper.GetHardDiskInfo(LSLibrary.HardwareInfoHelper.IdSector)">
            <summary>
            获取硬盘信息的细节
            </summary>
            <param name="phdinfo"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.HardwareInfoHelper.ChangeByteOrder(System.Byte[])">
            <summary>
            将byte数组中保存的信息转换成字符串
            </summary>
            <param name="charArray"></param>
        </member>
        <member name="P:LSLibrary.HttpHelper.CookieContainer">
            <summary>
            Cookie容器
            </summary>
        </member>
        <member name="P:LSLibrary.HttpHelper.Encoding">
            <summary>
            获取网页源码时使用的编码
            </summary>
            <value></value>
        </member>
        <member name="M:LSLibrary.HttpHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LSLibrary.HttpHelper"/> class.
            </summary>
        </member>
        <member name="M:LSLibrary.HttpHelper.#ctor(System.Net.CookieContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:LSLibrary.HttpHelper"/> class.
            </summary>
            <param name="cc">The cc.</param>
        </member>
        <member name="M:LSLibrary.HttpHelper.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LSLibrary.HttpHelper"/> class.
            </summary>
            <param name="contentType">Type of the content.</param>
            <param name="accept">The accept.</param>
            <param name="userAgent">The user agent.</param>
        </member>
        <member name="M:LSLibrary.HttpHelper.#ctor(System.Net.CookieContainer,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LSLibrary.HttpHelper"/> class.
            </summary>
            <param name="cc">The cc.</param>
            <param name="contentType">Type of the content.</param>
            <param name="accept">The accept.</param>
            <param name="userAgent">The user agent.</param>
        </member>
        <member name="M:LSLibrary.HttpHelper.GetHtml(System.String,System.Net.CookieContainer,System.String,System.Boolean)">
            <summary>
            获取指定页面的HTML代码
            </summary>
            <param name="url">指定页面的路径</param>
            <param name="postData">回发的数据</param>
            <param name="isPost">是否以post方式发送请求</param>
            <param name="cookieCollection">Cookie集合</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.HttpHelper.GetHtml(System.String,System.Net.CookieContainer,System.String,System.Boolean,System.String)">
            <summary>
            获取指定页面的HTML代码
            </summary>
            <param name="url">指定页面的路径</param>
            <param name="postData">回发的数据</param>
            <param name="isPost">是否以post方式发送请求</param>
            <param name="cookieCollection">Cookie集合</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.HttpHelper.GetHtml(System.String,System.Net.CookieContainer,System.String)">
            <summary>
            获取指定页面的HTML代码
            </summary>
            <param name="url">指定页面的路径</param>
            <param name="cookieCollection">Cookie集合</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.HttpHelper.GetHtml(System.String)">
            <summary>
            获取指定页面的HTML代码
            </summary>
            <param name="url">指定页面的路径</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.HttpHelper.GetHtml(System.String,System.String)">
            <summary>
            获取指定页面的HTML代码
            </summary>
            <param name="url">指定页面的路径</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.HttpHelper.GetHtml(System.String,System.String,System.Boolean)">
            <summary>
            获取指定页面的HTML代码
            </summary>
            <param name="url">指定页面的路径</param>
            <param name="postData">回发的数据</param>
            <param name="isPost">是否以post方式发送请求</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.HttpHelper.GetStream(System.String,System.Net.CookieContainer)">
            <summary>
            获取指定页面的Stream
            </summary>
            <param name="url">指定页面的路径</param>
            <param name="postData">回发的数据</param>
            <param name="isPost">是否以post方式发送请求</param>
            <param name="cookieCollection">Cookie集合</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.HttpHelper.GetStream(System.String,System.Net.CookieContainer,System.String)">
            <summary>
            获取指定页面的Stream
            </summary>
            <param name="url">指定页面的路径</param>
            <param name="postData">回发的数据</param>
            <param name="isPost">是否以post方式发送请求</param>
            <param name="cookieCollection">Cookie集合</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.HttpHelper.GetHiddenKeyValue(System.String,System.String)">
            <summary>
            获取HTML页面内制定Key的Value内容
            </summary>
            <param name="html"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.HttpHelper.GetUrlError(System.String)">
            <summary>
            判断URL是否有效
            </summary>
            <param name="url">待判断的URL，可以是网页以及图片链接等</param>
            <returns>200为正确，其余为大致网页错误代码</returns>
        </member>
        <member name="M:LSLibrary.HttpHelper.RemoveHtml(System.String)">
            <summary>
            移除Html标记
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.HttpHelper.HtmlEncode(System.String)">
            <summary>
            返回 HTML 字符串的编码结果
            </summary>
            <param name="inputData">字符串</param>
            <returns>编码结果</returns>
        </member>
        <member name="M:LSLibrary.HttpHelper.HtmlDecode(System.String)">
            <summary>
            返回 HTML 字符串的解码结果
            </summary>
            <param name="str">字符串</param>
            <returns>解码结果</returns>
        </member>
        <member name="T:LSLibrary.IDCardHelper">
            <summary>
            身份证操作辅助类
            </summary>
        </member>
        <member name="M:LSLibrary.IDCardHelper.InitIdType(System.Windows.Forms.ComboBox)">
            <summary>
            绑定身份证类别的名称
            </summary>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:LSLibrary.IDCardHelper.CreateIDType">
            <summary>
            获取身份证类别的名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.IDCardHelper.Validate(System.String)">
            <summary>
            验证身份证结果
            </summary>
            <param name="idcard">身份证号码</param>
            <returns>正确的时候返回string.Empty</returns>
        </member>
        <member name="M:LSLibrary.IDCardHelper.IdCard15To18(System.String)">
            <summary>
            15位身份证明号码转化成18位用来编码
            </summary>
            <param name="idcard">15位的身份证号码</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.IDCardHelper.GetProvince(System.String)">
            <summary>
            获取身份证对应省份的区划
            </summary>
            <param name="id">身份证</param>
            <returns>头两位+4个0</returns>
        </member>
        <member name="M:LSLibrary.IDCardHelper.GetCity(System.String)">
            <summary>
            获取身份证对应县市的区划
            </summary>
            <param name="id">身份证</param>
            <returns>头4位+2个0</returns>
        </member>
        <member name="M:LSLibrary.IDCardHelper.GetArea(System.String)">
            <summary>
            获取身份证对应地区的区划
            </summary>
            <param name="id">身份证</param>
            <returns>头6位</returns>
        </member>
        <member name="M:LSLibrary.IDCardHelper.GetSexName(System.String)">
            <summary>
            根据身份证判断是否男女
            </summary>
            <param name="id">身份证号码</param>
            <returns>返回"男"或者"女"</returns>
        </member>
        <member name="M:LSLibrary.IDCardHelper.GetBirthday(System.String)">
            <summary>
            根据身份证获取出生年月
            </summary>
            <param name="id">身份证号码</param>
            <returns>出生年月</returns>
        </member>
        <member name="T:LSLibrary.IdentifyEncoding">
            <summary>
            检测字符编码的类
            <seealso cref="T:System.IO.Stream"/>
            <seealso cref="T:System.Uri"/>
            <seealso cref="T:System.IO.FileInfo"/>
            </summary>
            <remarks>
            <![CDATA[
            <strong>IdentifyEncoding</strong> 用来检测 <see cref="Uri"/>,<see cref="System.IO.FileInfo"/>,<see cref="sbyte"/> 字节数组的编码．
            Create By lion  <br/>
            2005-02-21 22:00  <br/>
            Support .Net Framework v1.1.4322 <br/> 
            WebSite：www.lionsky.net(lion-a AT sohu.com) <br/> 
            ]]>
            </remarks>
        </member>
        <member name="M:LSLibrary.IdentifyEncoding.#ctor">
            <summary>
            初始化 <see cref="T:LSLibrary.IdentifyEncoding"/> 的实例
            </summary>
        </member>
        <member name="M:LSLibrary.IdentifyEncoding.GetEncodingName(System.Uri)">
            <summary>
            从指定的 <see cref="T:System.Uri"/> 中判断编码类型
            </summary>
            <param name="testurl">要判断的 <see cref="T:System.Uri"/> </param>
            <returns>返回编码类型("GB2312", "GBK", "HZ", "Big5", "CNS 11643", "ISO 2022CN", "UTF-8", "Unicode", "ASCII", "OTHER")</returns>
            <example>
            以下示例演示了如何调用 <see cref="M:LSLibrary.IdentifyEncoding.GetEncodingName(System.Uri)"/> 方法：
            <code>
             IdentifyEncoding ide = new IdentifyEncoding();
             Response.Write(ide.GetEncodingName(new Uri("http://10.87.0.31/index.html")));  
            </code>
            </example>
        </member>
        <member name="M:LSLibrary.IdentifyEncoding.GetEncodingName(System.IO.FileInfo)">
            <summary>
            从指定的 <see cref="T:System.IO.FileInfo"/> 中判断编码类型
            </summary>
            <param name="testfile">要判断的 <see cref="T:System.IO.FileInfo"/> </param>
            <returns>返回编码类型("GB2312", "GBK", "HZ", "Big5", "CNS 11643", "ISO 2022CN", "UTF-8", "Unicode", "ASCII", "OTHER")</returns>
            <example>
            以下示例演示了如何调用 <see cref="M:LSLibrary.IdentifyEncoding.GetEncodingName(System.Uri)"/> 方法：
            <code>
             IdentifyEncoding ide = new IdentifyEncoding();
             Response.Write(ide.GetEncodingName(new System.IO.FileInfo(@"C:\test.txt")));  
            </code>
            </example>
        </member>
        <member name="M:LSLibrary.IdentifyEncoding.GetEncodingName(System.SByte[])">
            <summary>
            从指定的 <see cref="T:System.SByte"/> 字节数组中判断编码类型
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.IO.FileInfo"/> </param>
            <returns>返回编码类型("GB2312", "GBK", "HZ", "Big5", "CNS 11643", "ISO 2022CN", "UTF-8", "Unicode", "ASCII", "OTHER")</returns>
            <example>
            以下示例演示了如何调用 <see cref="M:LSLibrary.IdentifyEncoding.GetEncodingName(System.Uri)"/> 方法：
            <code>
             IdentifyEncoding ide = new IdentifyEncoding();
             Response.Write(ide.GetEncodingName(IdentifyEncoding.ToSByteArray(System.Text.Encoding.GetEncoding("gb2312").GetBytes("vod.2sort.cn")))); 
            </code>
            </example>
        </member>
        <member name="M:LSLibrary.IdentifyEncoding.GB2312Probability(System.SByte[])">
            <summary>
            判断是GB2312编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:LSLibrary.IdentifyEncoding.GBKProbability(System.SByte[])">
            <summary>
            判断是GBK编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:LSLibrary.IdentifyEncoding.HZProbability(System.SByte[])">
            <summary>
            判断是HZ编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:LSLibrary.IdentifyEncoding.BIG5Probability(System.SByte[])">
            <summary>
            判断是BIG5编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:LSLibrary.IdentifyEncoding.ENCTWProbability(System.SByte[])">
            <summary>
            判断是CNS11643(台湾)编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:LSLibrary.IdentifyEncoding.ISO2022CNProbability(System.SByte[])">
            <summary>
            判断是ISO2022CN编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:LSLibrary.IdentifyEncoding.UTF8Probability(System.SByte[])">
            <summary>
            判断是UTF8编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:LSLibrary.IdentifyEncoding.UnicodeProbability(System.SByte[])">
            <summary>
            判断是Unicode编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:LSLibrary.IdentifyEncoding.ASCIIProbability(System.SByte[])">
            <summary>
            判断是ASCII编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:LSLibrary.IdentifyEncoding.Initialize_Frequencies">
            <summary>
            初始化必要的条件
            </summary>
        </member>
        <member name="M:LSLibrary.IdentifyEncoding.ToByteArray(System.SByte[])">
            <summary>
            将此实例中的指定 <see cref="T:System.SByte"/> 字符数组转换到 <see cref="T:System.Byte"/> 字符数组。
            </summary>
            <param name="sbyteArray">要转换的 <see cref="T:System.SByte"/> 字符数组</param>
            <returns>返回转换后的 <see cref="T:System.Byte"/> 字符数组</returns>
        </member>
        <member name="M:LSLibrary.IdentifyEncoding.ToByteArray(System.String)">
            <summary>
            将此实例中的指定字符串转换到 <see cref="T:System.Byte"/> 字符数组。
            </summary>
            <param name="sourceString">要转换的字符串</param>
            <returns>返回转换后的 <see cref="T:System.Byte"/> 字符数组</returns>
        </member>
        <member name="M:LSLibrary.IdentifyEncoding.ToByteArray(System.Object[])">
            <summary>
            将此实例中的指定 <see cref="T:System.Object"/> 数组转换到 <see cref="T:System.Byte"/> 字符数组。
            </summary>
            <param name="tempObjectArray">要转换的 <see cref="T:System.Object"/> 字符数组</param>
            <returns>返回转换后的 <see cref="T:System.Byte"/> 字符数组</returns>
        </member>
        <member name="M:LSLibrary.IdentifyEncoding.ToSByteArray(System.Byte[])">
            <summary>
            将此实例中的指定 <see cref="T:System.Byte"/> 字符数组转换到 <see cref="T:System.SByte"/> 字符数组。
            </summary>
            <param name="byteArray">要转换的 <see cref="T:System.Byte"/> 字符数组</param>
            <returns>返回转换后的 <see cref="T:System.SByte"/> 字符数组</returns>
        </member>
        <member name="M:LSLibrary.IdentifyEncoding.ReadInput(System.IO.Stream,System.SByte[]@,System.Int32,System.Int32)">
            <summary>从流读取字节序列,并将此流中的位置提升读取的字节数.</summary>
            <param name="sourceStream">要读取的流.</param>
            <param name="target">字节数组。此方法返回时,该缓冲区包含指定的字符数组,该数组的 start 和 (start + count-1) 之间的值由从当前源中读取的字节替换。</param>
            <param name="start">buffer 中的从零开始的字节偏移量,从此处开始存储从当前流中读取的数据。.</param>
            <param name="count">要从当前流中最多读取的字节数。</param>
            <returns>读入缓冲区中的总字节数。如果当前可用的字节数没有请求的字节数那么多,则总字节数可能小于请求的字节数,或者如果已到达流的末尾,则为零 (0)。</returns>
            <exception cref="T:System.ArgumentException">start 与 count 的和大于缓冲区长度。</exception>
            <exception cref="T:System.ArgumentNullException">target 为空引用(Visual Basic 中为 Nothing)。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset 或 count 为负。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:LSLibrary.IdentifyEncoding.ReadInput(System.IO.TextReader,System.SByte[]@,System.Int32,System.Int32)">
            <summary>从字符系列读取字节序列,并将此字符系列中的位置提升读取的字节数。</summary>
            <param name="sourceTextReader">要读取的流。</param>
            <param name="target">字节数组。此方法返回时,该缓冲区包含指定的字符数组,该数组的 start 和 (start + count-1) 之间的值由从当前源中读取的字节替换。</param>
            <param name="start">buffer 中的从零开始的字节偏移量,从此处开始存储从当前流中读取的数据。.</param>
            <param name="count">要从当前流中最多读取的字节数。</param>
            <returns>读入缓冲区中的总字节数。如果当前可用的字节数没有请求的字节数那么多,则总字节数可能小于请求的字节数,或者如果已到达流的末尾,则为零 (0)。</returns>
            <exception cref="T:System.ArgumentException">start 与 count 的和大于缓冲区长度。</exception>
            <exception cref="T:System.ArgumentNullException">target 为空引用(Visual Basic 中为 Nothing)。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset 或 count 为负。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:LSLibrary.IdentifyEncoding.FileLength(System.IO.FileInfo)">
            <summary>
            检测当前文件的大小
            </summary>
            <param name="file">被检测的文件</param>
            <returns>当前文件的大小。</returns>
        </member>
        <member name="M:LSLibrary.IdentifyEncoding.Identity(System.Int64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:LSLibrary.IdentifyEncoding.Identity(System.UInt64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:LSLibrary.IdentifyEncoding.Identity(System.Single)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:LSLibrary.IdentifyEncoding.Identity(System.Double)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="T:LSLibrary.INIFileUtil">
            <summary>
            INI文件操作辅助类
            </summary>
        </member>
        <member name="M:LSLibrary.INIFileUtil.#ctor(System.String)">
            <summary>
            传入INI文件路径构造对象
            </summary>
            <param name="INIPath">INI文件路径</param>
        </member>
        <member name="M:LSLibrary.INIFileUtil.IniWriteValue(System.String,System.String,System.String)">
            <summary>
            写INI文件
            </summary>
            <param name="Section">分组节点</param>
            <param name="Key">关键字</param>
            <param name="Value">值</param>
        </member>
        <member name="M:LSLibrary.INIFileUtil.IniReadValue(System.String,System.String)">
            <summary>
            读取INI文件
            </summary>
            <param name="Section">分组节点</param>
            <param name="Key">关键字</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.INIFileUtil.ClearAllSection">
            <summary>
            删除ini文件下所有段落
            </summary>
        </member>
        <member name="M:LSLibrary.INIFileUtil.ClearSection(System.String)">
            <summary>
            删除ini文件下指定段落下的所有键
            </summary>
            <param name="Section"></param>
        </member>
        <member name="T:LSLibrary.KeyboardHook">
            <summary>
            全局键盘钩子。这可以用来在全球范围内捕捉键盘输入。
            </summary>
        </member>
        <member name="F:LSLibrary.KeyboardHook.Control">
            <summary>
            请检查如果任一控制修饰符是积极的。
            </summary>
        </member>
        <member name="F:LSLibrary.KeyboardHook.Shift">
            <summary>
            检查，看看是否要么移位修饰符是积极的。
            </summary>
        </member>
        <member name="F:LSLibrary.KeyboardHook.Alt">
            <summary>
            检查看看或者ALT修饰符是积极的。
            </summary>
        </member>
        <member name="F:LSLibrary.KeyboardHook.Win">
             <summary>
            检查，看看是否要么运修饰符是积极的。
             </summary>
        </member>
        <member name="T:LSLibrary.KeyboardHook.KeyPressed">
            <summary>
            按键的函数原型。
            </summary>
        </member>
        <member name="F:LSLibrary.KeyboardHook.handledKeysDown">
            <summary>
            键处理和他们的回调
            </summary>
        </member>
        <member name="T:LSLibrary.KeyboardHook.KeyboardHookHandler">
            <summary>
            委托处理KeyDown事件。
            </summary>
            <param name="key">被按下的键。检查控制，按住Shift，Alt键，修饰符和赢。</param>
            <returns>如此，如果你要的关键，通过（被确认为应用程序），假的，如果你想ITTO被困（应用程序从来没有看到它）。</returns>
        </member>
        <member name="F:LSLibrary.KeyboardHook.KeyDown">
            <summary>
            在此添加一个钩子处理程序委托，以激活热键。
            </summary>
        </member>
        <member name="F:LSLibrary.KeyboardHook.Enabled">
             <summary>
            在挂机状态下保持跟踪。
             </summary>
        </member>
        <member name="M:LSLibrary.KeyboardHook.Enable">
            <summary>
            启动键盘钩子。
            </summary>
            <returns>True如果没有例外。</returns>
        </member>
        <member name="M:LSLibrary.KeyboardHook.Disable">
            <summary>
            禁用键盘挂钩。
            </summary>
            <returns>True如果禁用正确。</returns>
        </member>
        <member name="M:LSLibrary.KeyboardHook.AddKeyDown(System.Windows.Forms.Keys,LSLibrary.KeyboardHook.KeyPressed)">
            <summary>
            增加了一个关键的钩。
            </summary>
            <param name="key">要添加的关键。</param>
            <param name="callback">被称为该功能时，按下此键。</param>
        </member>
        <member name="M:LSLibrary.KeyboardHook.AddKeyUp(System.Windows.Forms.Keys,LSLibrary.KeyboardHook.KeyPressed)">
            <summary>
            增加了一个关键的钩。
            </summary>
            <param name="key">要添加的关键。</param>
            <param name="callback">被称为该功能时，按下此键。</param>
        </member>
        <member name="M:LSLibrary.KeyboardHook.Add(System.Windows.Forms.Keys,LSLibrary.KeyboardHook.KeyPressed)">
             <summary>
            新增的KeyDown包装
             </summary>
             <param name="key">要添加的关键。</param>
             <param name="callback">被称为该功能时，按下此键。</param>
        </member>
        <member name="M:LSLibrary.KeyboardHook.RemoveDown(System.Windows.Forms.Keys)">
            <summary>
            从钩取出一个关键。
            </summary>
            <param name="key">被删除的关键。</param>
        </member>
        <member name="M:LSLibrary.KeyboardHook.RemoveUp(System.Windows.Forms.Keys)">
            <summary>
            将重点从钩起来。
            </summary>
            <param name="key">被删除的关键。</param>
        </member>
        <member name="M:LSLibrary.KeyboardHook.Remove(System.Windows.Forms.Keys)">
            <summary>
            删除一个挂机键。
            </summary>
            <param name="key">被删除的关键。</param>
        </member>
        <member name="M:LSLibrary.KeyboardHook.KeyToString(System.Windows.Forms.Keys)">
            <summary>
            返回一个给定的键根据当前修饰符的字符串表示形式。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:LSLibrary.MouseHook">
            <summary>
            全局鼠标钩子。这可以用来在全球范围内捕获鼠标输入。
            </summary>
        </member>
        <member name="T:LSLibrary.MouseHook.MouseButtonHandler">
            <summary>
            委托处理鼠标输入。
            </summary>
            <param name="button">鼠标按钮被按下。</param>
            <returns>如此，如果你想通过（被认可的应用程序），假的关键，如果你想被困（应用程序从来没有看到它）。</returns>
        </member>
        <member name="F:LSLibrary.MouseHook.Enabled">
            <summary>
            在挂机状态下保持跟踪。
            </summary>
        </member>
        <member name="M:LSLibrary.MouseHook.Enable">
            <summary>
            启动鼠标钩子。
            </summary>
            <returns>True如果没有例外。</returns>
        </member>
        <member name="M:LSLibrary.MouseHook.Disable">
            <summary>
            禁用老鼠挂钩。
            </summary>
            <returns>True如果禁用正确。</returns>
        </member>
        <member name="T:LSLibrary.MP3Helper">
            <summary>
            MP3文件播放操作辅助类
            </summary>
        </member>
        <member name="T:LSLibrary.MyColors">
            <summary>
            RGB颜色操作辅助类
            </summary>
        </member>
        <member name="M:LSLibrary.MyDateTime.GetTheDay(System.Nullable{System.Int32})">
            <summary>
            哪天
            </summary>
            <param name="days">7天前:-7 7天后:+7</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.MyDateTime.GetSunday(System.Nullable{System.Int32})">
            <summary>
            周日
            </summary>
            <param name="weeks">上周-1 下周+1 本周0</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.MyDateTime.GetSaturday(System.Nullable{System.Int32})">
            <summary>
            周六
            </summary>
            <param name="weeks">上周-1 下周+1 本周0</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.MyDateTime.GetFirstDayOfMonth(System.Nullable{System.Int32})">
            <summary>
            月第一天
            </summary>
            <param name="months">上月-1 本月0 下月1</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.MyDateTime.GetLastDayOfMonth(System.Nullable{System.Int32})">
            <summary>
            月最后一天
            </summary>
            <param name="months">上月0 本月1 下月2</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.MyDateTime.GetFirstDayOfYear(System.Nullable{System.Int32})">
            <summary>
            年度第一天
            </summary>
            <param name="years">上年度-1 下年度+1</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.MyDateTime.GetLastDayOfYear(System.Nullable{System.Int32})">
            <summary>
            年度最后一天
            </summary>
            <param name="years">上年度0 本年度1 下年度2</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.MyDateTime.GetFirstDayOfQuarter(System.Nullable{System.Int32})">
            <summary>
            季度第一天
            </summary>
            <param name="quarters">上季度-1 下季度+1</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.MyDateTime.GetLastDayOfQuarter(System.Nullable{System.Int32})">
            <summary>
            季度最后一天
            </summary>
            <param name="quarters">上季度0 本季度1 下季度2</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.MyDateTime.GetDayOfWeekCN">
            <summary>
            中文星期
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.MyDateTime.GetDayOfWeekNum">
            <summary>
            获取星期数字形式,周一开始
            </summary>
            <returns></returns>
        </member>
        <member name="T:LSLibrary.UnCodebase">
            <summary>
            用于验证码图片识别的类
            GrayByPixels(); //灰度处理
            GetPicValidByValue(128, 4); //得到有效空间
            Bitmap[] pics = GetSplitPics(4, 1);     //分割
            string code = GetSingleBmpCode(pics[i], 128);   //得到代码串
            </summary>
        </member>
        <member name="M:LSLibrary.UnCodebase.GetGrayNumColor(System.Drawing.Color)">
            <summary>
            根据RGB，计算灰度值
            </summary>
            <param name="posClr">Color值</param>
            <returns>灰度值，整型</returns>
        </member>
        <member name="M:LSLibrary.UnCodebase.GrayByPixels">
            <summary>
            灰度转换,逐点方式
            </summary>
        </member>
        <member name="M:LSLibrary.UnCodebase.ClearPicBorder(System.Int32)">
            <summary>
            去图形边框
            </summary>
            <param name="borderWidth"></param>
        </member>
        <member name="M:LSLibrary.UnCodebase.GrayByLine">
            <summary>
            灰度转换,逐行方式
            </summary>
        </member>
        <member name="M:LSLibrary.UnCodebase.GetPicValidByValue(System.Int32,System.Int32)">
            <summary>
            得到有效图形并调整为可平均分割的大小
            </summary>
            <param name="dgGrayValue">灰度背景分界值</param>
            <param name="CharsCount">有效字符数</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.UnCodebase.GetPicValidByValue(System.Int32)">
            <summary>
            得到有效图形,图形为类变量
            </summary>
            <param name="dgGrayValue">灰度背景分界值</param>
            <param name="CharsCount">有效字符数</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.UnCodebase.GetPicValidByValue(System.Drawing.Bitmap,System.Int32)">
            <summary>
            得到有效图形,图形由外面传入
            </summary>
            <param name="dgGrayValue">灰度背景分界值</param>
            <param name="CharsCount">有效字符数</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.UnCodebase.GetSplitPics(System.Int32,System.Int32)">
            <summary>
            平均分割图片
            </summary>
            <param name="RowNum">水平上分割数</param>
            <param name="ColNum">垂直上分割数</param>
            <returns>分割好的图片数组</returns>
        </member>
        <member name="M:LSLibrary.UnCodebase.GetSingleBmpCode(System.Drawing.Bitmap,System.Int32)">
            <summary>
            返回灰度图片的点阵描述字串，1表示灰点，0表示背景
            </summary>
            <param name="singlepic">灰度图</param>
            <param name="dgGrayValue">背前景灰色界限</param>
            <returns></returns>
        </member>
        <member name="T:LSLibrary.PinYinUtil">
            <summary>
            中文字符串转换为拼音或者拼音首字母的辅助类
            </summary>
        </member>
        <member name="F:LSLibrary.PinYinUtil.pinyinValues">
            <SUMMARY>
            包含字符 ASC 码的整形数组。
            </SUMMARY>
        </member>
        <member name="F:LSLibrary.PinYinUtil.pinyinNames">
            <SUMMARY>
            包含汉字拼音的字符串数组。
            </SUMMARY>
        </member>
        <member name="M:LSLibrary.PinYinUtil.CHSToPinyin(System.String,System.String,System.Boolean)">
            <summary>
            将指定中文字符串转换为拼音形式
            </summary>
            <param name="chs">要转换的中文字符串</param>
            <param name="separator">连接拼音之间的分隔符</param>
            <param name="initialCap">指定是否将首字母大写</param>
            <returns>包含中文字符串的拼音的字符串</returns>
        </member>
        <member name="M:LSLibrary.PinYinUtil.CHSToPinyin(System.String,System.String)">
            <summary>
            将指定中文字符串转换为拼音形式
            </summary>
            <param name="chs">要转换的中文字符串</param>
            <param name="separator">连接拼音之间的分隔符</param>
            <returns>包含中文字符串的拼音的字符串</returns>
        </member>
        <member name="M:LSLibrary.PinYinUtil.CHSToPinyin(System.String,System.Boolean)">
            <summary>
            将指定中文字符串转换为拼音形式
            </summary>
            <param name="chs">要转换的中文字符串</param>
            <param name="initialCap">指定是否将首字母大写</param>
            <returns>包含中文字符串的拼音的字符串</returns>
        </member>
        <member name="M:LSLibrary.PinYinUtil.CHSToPinyin(System.String)">
            <summary>
            将指定中文字符串转换为拼音形式
            </summary>
            <param name="chs">要转换的中文字符串</param>
            <returns>包含中文字符串的拼音的字符串</returns>
        </member>
        <member name="M:LSLibrary.PinYinUtil.GetFirstPY(System.String)">
            <summary>
            提取首字母。兼容中英文
            </summary>
            <param name="chsStr">单个汉字或字母</param>
            <returns></returns>
        </member>
        <member name="P:LSLibrary.PinYinUtil.CHSPhraseSpecial">
            <summary>
            设置或获取包含例外词组读音的键/值对的组合
            </summary>
        </member>
        <member name="T:LSLibrary.ReflectionUtil">
            <summary>
            反射操作辅助类，如获取或设置字段、属性的值等反射信息。
            </summary>
        </member>
        <member name="M:LSLibrary.ReflectionUtil.GetDescription(System.Enum)">
            <overloads>
            	Get The Member Description using Description Attribute.
            </overloads>
            <summary>
            Get The Enum Field Description using Description Attribute.
            </summary>
            <param name="value">The value.</param>
            <returns>return description or value.ToString()</returns>
        </member>
        <member name="M:LSLibrary.ReflectionUtil.GetDescription(System.Enum,System.Object[])">
            <summary>
            Get The Enum Field Description using Description Attribute and 
            objects to format the Description.
            </summary>
            <param name="value">Enum For Which description is required.</param>
            <param name="args">An Object array containing zero or more objects to format.</param>
            <returns>return null if DescriptionAttribute is not found or return type description</returns>
        </member>
        <member name="M:LSLibrary.ReflectionUtil.GetDescription(System.Reflection.MemberInfo)">
            <summary>
            Get The Type Description using Description Attribute.
            </summary>
            <param name="member">Specified Member for which Info is Required</param>
            <returns>return null if DescriptionAttribute is not found or return type description</returns>
        </member>
        <member name="M:LSLibrary.ReflectionUtil.GetDescription(System.Reflection.MemberInfo,System.Object[])">
            <summary>
            Get The Type Description using Description Attribute and 
            objects to format the Description.
            </summary>
            <param name="member"> Specified Member for which Info is Required</param>
            <param name="args">An Object array containing zero or more objects to format.</param>
            <returns>return <see cref="F:System.String.Empty"/> if DescriptionAttribute is 
            not found or return type description</returns>
        </member>
        <member name="M:LSLibrary.ReflectionUtil.GetAttribute(System.Type,System.Reflection.Assembly)">
            <overloads>
            Gets the specified object attributes
            </overloads>
            <summary>
            Gets the specified object attributes for assembly as specified by type
            </summary>
            <param name="attributeType">The attribute Type for which the custom attributes are to be returned.</param>
            <param name="assembly">the assembly in which the specified attribute is defined</param>
            <returns>Attribute as Object or null if not found.</returns>
        </member>
        <member name="M:LSLibrary.ReflectionUtil.GetAttribute(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Gets the specified object attributes for type as specified by type
            </summary>
            <param name="attributeType">The attribute Type for which the custom attributes are to be returned.</param>
            <param name="type">the type on which the specified attribute is defined</param>
            <returns>Attribute as Object or null if not found.</returns>
        </member>
        <member name="M:LSLibrary.ReflectionUtil.GetAttribute(System.Type,System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the specified object attributes for type as specified by type with option to serach parent
            </summary>
            <param name="attributeType">The attribute Type for which the custom attributes are to be returned.</param>
            <param name="type">the type on which the specified attribute is defined</param>
            <param name="searchParent">if set to <see langword="true"/> [search parent].</param>
            <returns>
            Attribute as Object or null if not found.
            </returns>
        </member>
        <member name="M:LSLibrary.ReflectionUtil.GetAttributes(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Gets the collection of all specified object attributes for type as specified by type
            </summary>
            <param name="attributeType">The attribute Type for which the custom attributes are to be returned.</param>
            <param name="type">the type on which the specified attribute is defined</param>
            <returns>Attribute as Object or null if not found.</returns>
        </member>
        <member name="M:LSLibrary.ReflectionUtil.GetAttributes(System.Type,System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the collection of all specified object attributes for type as specified by type with option to serach parent
            </summary>
            <param name="attributeType">The attribute Type for which the custom attributes are to be returned.</param>
            <param name="type">the type on which the specified attribute is defined</param>
            <param name="searchParent">The attribute Type for which the custom attribute is to be returned.</param>
            <returns>
            Attribute as Object or null if not found.
            </returns>
        </member>
        <member name="M:LSLibrary.ReflectionUtil.GetImageResource(System.String)">
            <summary>
            根据资源名称获取图片资源流
            </summary>
            <param name="ResourceName"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ReflectionUtil.LoadBitmap(System.Type,System.String,System.String)">
            <summary>
            获取程序集资源的位图资源
            </summary>
            <param name="assemblyType">程序集中的某一对象类型</param>
            <param name="resourceHolder">资源的根名称。例如，名为“MyResource.en-US.resources”的资源文件的根名称为“MyResource”。</param>
            <param name="imageName">资源项名称</param>
        </member>
        <member name="M:LSLibrary.ReflectionUtil.GetStringRes(System.Type,System.String,System.String)">
            <summary>
             获取程序集资源的文本资源
            </summary>
            <param name="assemblyType">程序集中的某一对象类型</param>
            <param name="resName">资源项名称</param>
            <param name="resourceHolder">资源的根名称。例如，名为“MyResource.en-US.resources”的资源文件的根名称为“MyResource”。</param>
        </member>
        <member name="M:LSLibrary.ReflectionUtil.GetManifestString(System.Type,System.String,System.String)">
            <summary>
            获取程序集嵌入资源的文本形式
            </summary>
            <param name="assemblyType">程序集中的某一对象类型</param>
            <param name="charset">字符集编码</param>
            <param name="ResName">嵌入资源相对路径</param>
            <returns>如没找到该资源则返回空字符</returns>
        </member>
        <member name="M:LSLibrary.ReflectionUtil.CreateInstance(System.String)">
            <summary>
            创建对应实例
            </summary>
            <param name="type">类型</param>
            <returns>对应实例</returns>
        </member>
        <member name="M:LSLibrary.ReflectionUtil.CreateInstance(System.Type)">
            <summary>
            创建对应实例
            </summary>
            <param name="type">类型</param>
            <returns>对应实例</returns>
        </member>
        <member name="T:LSLibrary.RMBUtil">
            <summary>
            转换人民币大小金额辅助类
            </summary>
        </member>
        <member name="M:LSLibrary.RMBUtil.CmycurD(System.Decimal)">
            <summary> 
            转换人民币大小金额 
            </summary> 
            <param name="num">金额</param> 
            <returns>返回大写形式</returns> 
        </member>
        <member name="M:LSLibrary.RMBUtil.CmycurD(System.String)">
            <summary> 
            转换人民币大小金额  (一个重载，将字符串先转换成数字在调用CmycurD)
            </summary> 
            <param name="num">用户输入的金额，字符串形式未转成decimal</param> 
            <returns></returns> 
        </member>
        <member name="T:LSLibrary.Serializer">
            <summary>
            序列号操作辅助类
            </summary>
            
        </member>
        <member name="M:LSLibrary.Serializer.SerializeToBinary(System.Object)">
            <summary>
            序列化对象到二进制字节数组
            </summary>
            <param name="obj">待序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.Serializer.SerializeToBinary(System.Object,System.String,System.IO.FileMode)">
            <summary>
            序列化对象到指定的文件中
            </summary>
            <param name="obj">待序列化的对象</param>
            <param name="path">文件路径</param>
            <param name="mode">文件打开方式</param>
        </member>
        <member name="M:LSLibrary.Serializer.SerializeToBinary(System.Object,System.String)">
            <summary>
            序列号对象到文件中，创建一个新文件
            </summary>
            <param name="obj">待序列化的对象</param>
            <param name="path">文件路径</param>
        </member>
        <member name="M:LSLibrary.Serializer.SerializeToSoap(System.Object)">
            <summary>
            序列化对象到Soap字符串中
            </summary>
            <param name="obj">待序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.Serializer.SerializeToSoap(System.Object,System.String,System.IO.FileMode)">
            <summary>
            序列化对象到Soap字符串中，并保存到文件
            </summary>
            <param name="obj">待序列化的对象</param>
            <param name="path">文件路径</param>
            <param name="mode">文件打开方式</param>
        </member>
        <member name="M:LSLibrary.Serializer.SerializeToSoap(System.Object,System.String)">
            <summary>
            序列化对象到Soap字符串中，并保存到文件
            </summary>
            <param name="obj">待序列化的对象</param>
            <param name="path">文件路径</param>
        </member>
        <member name="M:LSLibrary.Serializer.SerializeToXml(System.Object)">
            <summary>
            序列化对象到XML字符串中
            </summary>
            <param name="obj">待序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.Serializer.SerializeToXmlFile(System.Object,System.String,System.IO.FileMode)">
            <summary>
            序列化对象到XML字符串,并保存到文件中
            </summary>
            <param name="obj">待序列化的对象</param>
            <param name="path">文件路径</param>
            <param name="mode">文件打开方式</param>
        </member>
        <member name="M:LSLibrary.Serializer.SerializeToXmlFile(System.Object,System.String)">
            <summary>
            序列化对象到XML字符串,并保存到文件中
            </summary>
            <param name="obj">待序列化的对象</param>
            <param name="path">文件路径</param>
        </member>
        <member name="M:LSLibrary.Serializer.DeserializeFromXmlFile(System.Type,System.String)">
            <summary>
            从指定的文件中反序列化到具体的对象
            </summary>
            <param name="type">对象的类型</param>
            <param name="path">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.Serializer.DeserializeFromXml(System.Type,System.String)">
            <summary>
            从指定的XML字符串中反序列化到具体的对象
            </summary>
            <param name="type">对象的类型</param>
            <param name="s">XML字符串</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.Serializer.DeserializeFromSoap(System.Type,System.String)">
            <summary>
            从指定的Soap协议字符串中反序列化到具体的对象
            </summary>
            <param name="type">对象的类型</param>
            <param name="s">Soap协议字符串</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.Serializer.DeserializeFromBinary(System.Type,System.Byte[])">
            <summary>
            从指定的二进制字节数组中反序列化到具体的对象
            </summary>
            <param name="type">对象的类型</param>
            <param name="bytes">二进制字节数组</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.Serializer.DeserializeFromBinary(System.Type,System.String)">
            <summary>
            从指定的文件总，以二进制字节数组中反序列化到具体的对象
            </summary>
            <param name="type">对象的类型</param>
            <param name="bytes">二进制字节数组存储的文件</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.Serializer.GetByteSize(System.Object)">
            <summary>
            获取对象的字节数组大小
            </summary>
            <param name="o">对象</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.Serializer.Clone(System.Object)">
            <summary>
            克隆一个对象
            </summary>
            <param name="o">对象</param>
            <returns></returns>
        </member>
        <member name="T:LSLibrary.SpecialDirectories">
            <summary>
            获取一个对象，它提供用于访问经常引用的目录的属性。
            </summary>
        </member>
        <member name="P:LSLibrary.SpecialDirectories.AllUsersApplicationData">
            <summary>Gets a path name pointing to the application's data in the 
            \Documents and Setting\All Users\ApplicationData directory.</summary>
            <returns>String.</returns>
            <remarks>If a path does not exist, one is created in the following format: 
            Base Path\ProductName\ProductVersion
            if Base Path Contains "Microsoft", incase of Add-In
            retuns Base Path\{0}\{1}
            Data stored in this path is part of user profile that is enabled for roaming.
            A roaming user works on more than one computer in a network. The user 
            profile for a roaming user is kept on a server on the network and is 
            loaded onto a system when the user logs on. For a user profile to be 
            considered for roaming, the operating system must support roaming 
            profiles and it must be enabled.
            A typical base path is C:\Documents and Settings\All Users\Application Data.
            </remarks>
        </member>
        <member name="P:LSLibrary.SpecialDirectories.CurrentUserApplicationData">
            <summary>Gets a path name pointing to the CurrentApplicationData directory.</summary>
            <returns>String.</returns>
            <remarks>If a path does not exist, one is created in the following format: 
            Base Path\ProductName\ProductVersion
            if Base Path Contains "Microsoft", incase of Add-In
            retuns Base Path\{0}\{1}
            Data stored in this path is part of user profile that is enabled for roaming.
            A roaming user works on more than one computer in a network. The user 
            profile for a roaming user is kept on a server on the network and is 
            loaded onto a system when the user logs on. For a user profile to be 
            considered for roaming, the operating system must support roaming 
            profiles and it must be enabled.
            A typical base path is C:\Documents and Settings\username\Application Data.
            </remarks>
        </member>
        <member name="P:LSLibrary.SpecialDirectories.Desktop">
            <summary>Gets a path name pointing to the Desktop directory.</summary>
            <returns>String.</returns>
        </member>
        <member name="P:LSLibrary.SpecialDirectories.MyDocuments">
            <summary>Gets a path name pointing to the MyDocuments directory.</summary>
            <returns>String.</returns>
        </member>
        <member name="P:LSLibrary.SpecialDirectories.MyMusic">
            <summary>Gets a path name pointing to the My Music directory.</summary>
            <returns>String.</returns>
        </member>
        <member name="P:LSLibrary.SpecialDirectories.MyPictures">
            <summary>Gets a path name pointing to the My Pictures directory.</summary>
            <returns>String.</returns>
        </member>
        <member name="P:LSLibrary.SpecialDirectories.ProgramFiles">
            <summary>Gets a path pointing to the Program Files directory.</summary>
            <returns>String.</returns>
        </member>
        <member name="P:LSLibrary.SpecialDirectories.Programs">
            <summary>Gets a path name pointing to the Programs directory.</summary>
            <returns>String.</returns>
        </member>
        <member name="P:LSLibrary.SpecialDirectories.Temp">
            <summary>Gets a path name pointing to the Temp directory.</summary>
            <returns>String.</returns>
        </member>
        <member name="M:LSLibrary.SpecialDirectories.GetDirectoryPath(System.String,System.String)">
            <summary>
            Gets the directory path.
            </summary>
            <param name="directory">The directory.</param>
            <param name="directoryNameResID">The directory name res ID.</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.SpecialDirectories.GetLongPath(System.String)">
            <summary>
            Gets the long path.
            </summary>
            <param name="fullPath">The full path.</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.SpecialDirectories.GetParentPathInternal(System.String)">
            <summary>Returns the parent path of the provided path.</summary>
            <returns>String.</returns>
            <param name="path">String. Path to be examined. Required. </param>
        </member>
        <member name="M:LSLibrary.SpecialDirectories.IsRoot(System.String)">
            <summary>
            Determines whether the specified path is absolute.
            </summary>
            <param name="path">The path.</param>
            <returns>
            	<c>true</c> if the specified path is absolute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:LSLibrary.SpecialDirectories.RemoveEndingSeparator(System.String)">
            <summary>
            Removes the ending separator.
            </summary>
            <param name="path">The path.</param>
            <returns>The path.without any ending seperator</returns>
        </member>
        <member name="M:LSLibrary.SpecialDirectories.GetDataPath(System.String)">
            <summary>
            Gets the data path.
            </summary>
            <param name="basePath">The base path.</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.SpecialDirectories.StringFormat(System.String,System.Object[])">
            <summary>
            Replaces the format item in a specified String with the text equivalent
            of the value of a corresponding Object instance in a specified array. 
            </summary>
            <param name="text">A String containing zero or more format items.</param>
            <param name="args">An Object array containing zero or more objects to format.</param>
            <returns>A copy of format in which the format items have been replaced by the String equivalent of the corresponding instances of Object in args.</returns>
        </member>
        <member name="M:LSLibrary.UnicodeHelper.StringToUnicode(System.String)">
            <summary>
            将原始字串转换为unicode,格式为\u.\u.
            </summary>
            <param name="srcText"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.UnicodeHelper.UnicodeToString(System.String)">
            <summary>
            将Unicode字串\u.\u.格式字串转换为原始字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.UnicodeHelper.GB2Unicode(System.String)">
            <summary>
            GB2312转换成unicode编码 
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.UnicodeHelper.GetByte(System.Char)">
            <summary>
            得到单个字符的值
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.UnicodeHelper.ConvertSingle(System.String)">
            <summary>
            转换一个字符，输入如"Π"中的"03a0"
            </summary>
            <param name="unicodeSingle"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.UnicodeHelper.UtoGB(System.String)">
            <summary>
            unicode编码转换成GB2312汉字 
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:LSLibrary.WordCombineUtil">
            <summary>
            简单的Word操作对象
            </summary>
            <example>
                        object dest="c:\\template.doc";
                        WordCombineUtil.Combine(new string[] { "c:\\0.doc",
                        "c:\\1.doc",
                        "c:\\2.doc",
                        "c:\\3.doc",
                        "c:\\4.doc",
                        "c:\\5.doc",
                        "c:\\6.doc",
                        "c:\\7.doc",
                        "c:\\8.doc",
                        "c:\\9.doc" }, ref dest);
                        
            </example>
        </member>
        <member name="F:LSLibrary.WordCombineUtil.Miss_Object">
            <summary>
            com对象常用的参数
            </summary>
        </member>
        <member name="M:LSLibrary.WordCombineUtil.Combine(System.String[],System.Object@)">
            <summary>
            合并word文档
            </summary>
            <param name="orgs">需要合并的文档路径</param>
            <param name="dest">目标文档</param>
        </member>
        <member name="T:LSLibrary.StringConstants">
            <summary>
            常用的字符串常量
            </summary>
        </member>
        <member name="F:LSLibrary.StringConstants.Dot">
            <summary></summary>
        </member>
        <member name="F:LSLibrary.StringConstants.Underscore">
            <summary></summary>
        </member>
        <member name="F:LSLibrary.StringConstants.CommaSpace">
            <summary></summary>
        </member>
        <member name="F:LSLibrary.StringConstants.Comma">
            <summary></summary>
        </member>
        <member name="F:LSLibrary.StringConstants.OpenParen">
            <summary></summary>
        </member>
        <member name="F:LSLibrary.StringConstants.ClosedParen">
            <summary></summary>
        </member>
        <member name="F:LSLibrary.StringConstants.SingleQuote">
            <summary></summary>
        </member>
        <member name="T:LSLibrary.StringUtil">
            <summary>
            简要说明TextHelper。
            </summary>
        </member>
        <member name="M:LSLibrary.StringUtil.RemovePrefix(System.String,System.String)">
            <summary>
            去除指定字符串前缀的算法
            </summary>
            <param name="content">待除去特定字符串的内容</param>
            <param name="prefixString">特定字符串列表(以逗号,分号,空格等标识)</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.Util.GetAcronym(System.String)">
            <summary>
            获取中文字首字拼写
            </summary>
            <param name="chinese"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.Util.getSingle(System.String)">
            <summary>
            获取单个字首字母 (GB2312)
            </summary>
            <param name="cnChar"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.Util.Join``1(System.Collections.Generic.IList{``0})">
            <summary>
            用 , 分割 合并数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.Util.Join(System.Collections.Generic.IList{System.String})">
            <summary>
            用 , 分割 合并数组
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.Util.Join(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            用 , 分割 合并数组
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.Util.Join``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            合并数组 分割符
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">数组列</param>
            <param name="c">分隔符</param>
            <returns></returns>
        </member>
        <member name="P:LSLibrary.Util.WinFormName">
            <summary>
            获取当前Windows Form应用程序的名字,不包括.exe
            </summary>
        </member>
        <member name="M:LSLibrary.Util.RandomAction(System.Int32)">
            <summary>
            随机发生器，按指定概率随机执行操作
            </summary>
            <param name="rate"></param>
            <returns></returns>
        </member>
        <member name="T:LSLibrary.ValidateUtil">
            <summary>
            各种输入格式验证辅助类
            </summary>
        </member>
        <member name="M:LSLibrary.ValidateUtil.GetStringLength(System.String)">
            <summary>
            返回字符串真实长度, 1个汉字长度为2
            </summary>
            <returns>字符长度</returns>
        </member>
        <member name="M:LSLibrary.ValidateUtil.IsValidUserName(System.String)">
            <summary>
            检测用户名格式是否有效
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ValidateUtil.IsValidPassword(System.String)">
            <summary>
            密码有效性
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ValidateUtil.IsValidInt(System.String)">
            <summary>
            int有效性
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ValidateUtil.IsNumber(System.String)">
            <summary>
            是否数字字符串
            </summary>
            <param name="inputData">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ValidateUtil.IsNumberSign(System.String)">
            <summary>
            是否数字字符串 可带正负号
            </summary>
            <param name="inputData">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ValidateUtil.IsDecimal(System.String)">
            <summary>
            是否是浮点数
            </summary>
            <param name="inputData">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ValidateUtil.IsDecimalSign(System.String)">
            <summary>
            是否是浮点数 可带正负号
            </summary>
            <param name="inputData">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ValidateUtil.IsHasCHZN(System.String)">
            <summary>
            检测是否有中文字符
            </summary>
            <param name="inputData"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ValidateUtil.GetCHZNLength(System.String)">
            <summary> 
            检测含有中文字符串的实际长度 
            </summary> 
            <param name="str">字符串</param> 
        </member>
        <member name="M:LSLibrary.ValidateUtil.IsIdCard(System.String)">
            <summary>
            验证身份证是否合法  15 和  18位两种
            </summary>
            <param name="idCard">要验证的身份证</param>
        </member>
        <member name="M:LSLibrary.ValidateUtil.IsEmail(System.String)">
            <summary>
            是否是邮件地址
            </summary>
            <param name="inputData">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ValidateUtil.IsValidZip(System.String)">
            <summary>
            邮编有效性
            </summary>
            <param name="zip"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ValidateUtil.IsValidPhone(System.String)">
            <summary>
            固定电话有效性
            </summary>
            <param name="phone"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ValidateUtil.IsValidMobile(System.String)">
            <summary>
            手机有效性
            </summary>
            <param name="strMobile"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ValidateUtil.IsValidPhoneAndMobile(System.String)">
            <summary>
            电话有效性（固话和手机 ）
            </summary>
            <param name="strVla"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ValidateUtil.IsValidURL(System.String)">
            <summary>
            Url有效性
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ValidateUtil.IsValidIP(System.String)">
            <summary>
            IP有效性
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ValidateUtil.IsValidDomain(System.String)">
            <summary>
            domain 有效性
            </summary>
            <param name="host">域名</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ValidateUtil.IsBase64String(System.String)">
            <summary>
            判断是否为base64字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ValidateUtil.IsGuid(System.String)">
            <summary>
            验证字符串是否是GUID
            </summary>
            <param name="guid">字符串</param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ValidateUtil.IsDate(System.String)">
            <summary>
            判断输入的字符是否为日期
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ValidateUtil.IsDateHourMinute(System.String)">
            <summary>
            判断输入的字符是否为日期,如2004-07-12 14:25|||1900-01-01 00:00|||9999-12-31 23:59
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.ValidateUtil.CheckMathLength(System.String,System.Int32)">
            <summary>
            检查字符串最大长度，返回指定长度的串
            </summary>
            <param name="sqlInput">输入字符串</param>
            <param name="maxLength">最大长度</param>
            <returns></returns>			
        </member>
        <member name="M:LSLibrary.ValidateUtil.Encode(System.String)">
            <summary>
            转换成 HTML code
            </summary>
            <param name="str">string</param>
            <returns>string</returns>
        </member>
        <member name="M:LSLibrary.ValidateUtil.Decode(System.String)">
             <summary>
            解析html成 普通文本
             </summary>
             <param name="str">string</param>
             <returns>string</returns>
        </member>
        <member name="T:LSLibrary.Camera">
            <summary>
            摄像头操作辅助类，包括开启、关闭、抓图、设置等功能
            </summary>
        </member>
        <member name="M:LSLibrary.Camera.CloseWebcam">
            <summary>
            关闭摄像头
            </summary>
        </member>
        <member name="M:LSLibrary.Camera.StartWebCam">
            <summary>
            开启摄像头
            </summary>
        </member>
        <member name="M:LSLibrary.Camera.GrabImage(System.String)">
            <summary>
            抓图到文件
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:LSLibrary.Camera.GrabImageToClipBoard">
            <summary>
            抓图到剪切板
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.Camera.SetCaptureSource">
            <summary>
            弹出色彩设置对话框
            </summary>
        </member>
        <member name="M:LSLibrary.Camera.SetCaptureFormat">
            <summary>
            弹出视频格式设置对话框
            </summary>
        </member>
        <member name="T:LSLibrary.AviCapture">
            <summary>
            视频辅助类
            </summary>
        </member>
        <member name="T:LSLibrary.XmlConvertor">
            <summary>
            这个类提供了一些实用的方法来转换XML和对象。
            </summary>
        </member>
        <member name="M:LSLibrary.XmlConvertor.XmlToObject(System.String,System.Type)">
            <summary>
            将XML字符串转换到指定的对象。
            </summary>
            <param name="xml">XML字符串。</param>
            <param name="type">对象的类型。</param>
            <returns>从XML字符串反序列化的对象。</returns>
        </member>
        <member name="M:LSLibrary.XmlConvertor.ObjectToXml(System.Object,System.Boolean)">
            <summary>
            转换为XML字符串的对象。
            </summary>
            <param name="obj">要序列化的对象</param>
            <param name="toBeIndented"><c>true</c> 如果想要的XML字符串的目的，否则 <c>false</c>.</param>
            <returns>XML字符串。</returns>
        </member>
        <member name="T:LSLibrary.XmlHelper">
            <summary>
            XML操作类
            </summary>
        </member>
        <member name="M:LSLibrary.XmlHelper.Serialize(System.String,System.Object)">
            <summary>
            序列化
            </summary>
            <param name="path"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.XmlHelper.XmlSerialize(System.String,System.Object,System.Type)">
            <summary>
            序列化
            </summary>
            <param name="path"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.XmlHelper.Deserialize(System.String)">
            <summary>
            反序列化
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.XmlHelper.XmlDeserialize(System.String,System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.XmlHelper.Read(System.String,System.String)">
            <summary>
            读取节点内容
            </summary>
            <param name="XmlPathNode"></param>
            <param name="Attrib"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.XmlHelper.GetData(System.String)">
            <summary>
            获取节点下的DataSet
            </summary>
            <param name="XmlPathNode"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibrary.XmlHelper.Replace(System.String,System.String)">
            <summary>
            替换某节点的内容
            </summary>
            <param name="XmlPathNode"></param>
            <param name="Content"></param>
        </member>
        <member name="M:LSLibrary.XmlHelper.Delete(System.String)">
            <summary>
            删除节点
            </summary>
            <param name="Node"></param>
        </member>
        <member name="M:LSLibrary.XmlHelper.InsertNode(System.String,System.String,System.String,System.String)">
            <summary>
            插入一节点和此节点的一子节点
            </summary>
            <param name="MainNode"></param>
            <param name="ChildNode"></param>
            <param name="Element"></param>
            <param name="Content"></param>
        </member>
        <member name="M:LSLibrary.XmlHelper.InsertElement(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            插入一个节点带一个属性 
            </summary>
            <param name="MainNode"></param>
            <param name="Element"></param>
            <param name="Attrib"></param>
            <param name="AttribContent"></param>
            <param name="Content"></param>
        </member>
        <member name="M:LSLibrary.XmlHelper.InsertElement(System.String,System.String,System.String)">
            <summary>
            插入
            </summary>
            <param name="MainNode"></param>
            <param name="Element"></param>
            <param name="Content"></param>
        </member>
        <member name="M:LSLibrary.XmlHelper.Save">
            <summary>
            保存XML
            </summary>
        </member>
        <member name="T:LSLibraryS.CookieManger">
            <summary>
            Cookie操作辅助类
            </summary>
        </member>
        <member name="M:LSLibraryS.CookieManger.InternetSetCookie(System.String,System.String,System.String)">
            <summary>
            设置系统Cookie
            </summary>
            <param name="lpszUrlName">Cookie域</param>
            <param name="lbszCookieName">Cookie名</param>
            <param name="lpszCookieData">Cookie数据</param>
            <returns>设置成功与否</returns>
        </member>
        <member name="M:LSLibraryS.CookieManger.GetCKS(System.String)">
            <summary>
            获取cookie数组
            </summary>
            <param name="ck"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibraryS.CookieManger.GetCK(System.Windows.Forms.WebBrowser)">
            <summary>
            获得浏览器里的Cookie字符串
            </summary>
            <param name="browser">浏览器</param>
            <returns>剔除重复值后的Cookie字符串</returns>
        </member>
        <member name="M:LSLibraryS.CookieManger.GetCK(System.String[])">
            <summary>
            从Cookie数组中转换成不重复的Cookie字符串，相同的Cookie取前面的
            </summary>
            <param name="cks">Cookie数组</param>
            <returns>剔除重复的Cookie字符串</returns>
        </member>
        <member name="M:LSLibraryS.CookieManger.GetCK(System.Net.CookieCollection)">
            <summary>
            从CookieCollection中获取Cookie字符串
            </summary>
            <param name="cc">CookieCollection，一般用在WebRequest中</param>
            <returns>转换后的Cookie字符串</returns>
        </member>
        <member name="M:LSLibraryS.CookieManger.GetCK(System.String,System.String)">
            <summary>
            将Cookie字符串填充到CookieCollection中
            </summary>
            <param name="ck">Cookie字符串</param>
            <param name="url">Cookie的域</param>
            <returns>添加后的CookieCollection</returns>
        </member>
        <member name="M:LSLibraryS.CookieManger.GetDomains(System.String)">
            <summary>
            获取所有可能的Cookie域
            </summary>
            <param name="url">域的全称</param>
            <returns>所有可能的域</returns>
        </member>
        <member name="M:LSLibraryS.CookieManger.GetDomains(System.Windows.Forms.WebBrowser)">
            <summary>
            获取浏览器的所有可能的Cookie域
            </summary>
            <param name="browser">浏览器</param>
            <returns>所有可能的域</returns>
        </member>
        <member name="M:LSLibraryS.CookieManger.SetCKToBrowser(System.Windows.Forms.WebBrowser,System.String)">
            <summary>
            将定制的Cookie字符串发给浏览器
            </summary>
            <param name="browser">浏览器</param>
            <param name="ck">Cookie字符串</param>
        </member>
        <member name="M:LSLibraryS.CookieManger.SetCKAppendToCC(System.Net.CookieCollection,System.String,System.String)">
            <summary>
            将Cookie字符串描述的Cookie追加到CookieCoollection
            </summary>
            <param name="cc">CookieCoollection</param>
            <param name="ck">Cookie字符串</param>
            <param name="url">Cookie的域</param>
        </member>
        <member name="M:LSLibraryS.CookieManger.SetCKToSystem(System.String,System.String)">
            <summary>
            将Cookie字符串设置到系统中，便于浏览器使用
            </summary>
            <param name="ck">Cookie字符串</param>
            <param name="url">Cookie的域</param>
        </member>
        <member name="M:LSLibraryS.CookieManger.SetCKToSystem(System.Net.CookieCollection,System.String)">
            <summary>
            将CookieCollection中的Cookie设置到系统中，便于浏览器使用
            </summary>
            <param name="cc">CookieCollection</param>
            <param name="url">Cookie的域</param>
        </member>
        <member name="M:LSLibraryS.CookieManger.ClearCookiesFiles">
            <summary>
            清除系统的Cookie文件
            </summary>
        </member>
        <member name="M:LSLibraryS.CookieManger.ClearCookies(System.String,System.String)">
            <summary>
            清除系统指定的Cookie
            </summary>
            <param name="ck">指定的Cookie</param>
            <param name="url">Cookie的域</param>
        </member>
        <member name="M:LSLibraryS.CookieManger.ClearCookies(System.Windows.Forms.WebBrowser)">
            <summary>
            将浏览器中的Cookie清除
            </summary>
            <param name="browser">浏览器</param>
        </member>
        <member name="M:LSLibraryS.CookieManger.IncludeCK(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            检查Cookie集合中是否包含指定的Cookie值
            </summary>
            <param name="cks">Cookie集合</param>
            <param name="ck">待判断的Cookie</param>
            <returns>Cookie集合中是否包含指定的Cookie</returns>
        </member>
        <member name="T:LSLibraryS.FTPHelper">
            <summary>
            FTP操作辅助类
            </summary>
        </member>
        <member name="F:LSLibraryS.FTPHelper.server">
            <summary>
            IP address or hostname to connect to
            </summary>
        </member>
        <member name="F:LSLibraryS.FTPHelper.user">
            <summary>
            Username to login as
            </summary>
        </member>
        <member name="F:LSLibraryS.FTPHelper.pass">
            <summary>
            Password for account
            </summary>
        </member>
        <member name="F:LSLibraryS.FTPHelper.port">
            <summary>
            Port number the FTP server is listening on
            </summary>
        </member>
        <member name="F:LSLibraryS.FTPHelper.timeout">
            <summary>
            The timeout (miliseconds) for waiting on data to arrive
            </summary>
        </member>
        <member name="M:LSLibraryS.FTPHelper.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:LSLibraryS.FTPHelper.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="server">Server to connect to</param>
            <param name="user">Account to login as</param>
            <param name="pass">Account password</param>
        </member>
        <member name="M:LSLibraryS.FTPHelper.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="server">Server to connect to</param>
            <param name="port">Port server is listening on</param>
            <param name="user">Account to login as</param>
            <param name="pass">Account password</param>
        </member>
        <member name="P:LSLibraryS.FTPHelper.IsConnected">
            <summary>
            Connection status to the server
            </summary>
        </member>
        <member name="P:LSLibraryS.FTPHelper.MessagesAvailable">
            <summary>
            Returns true if the message buffer has data in it
            </summary>
        </member>
        <member name="P:LSLibraryS.FTPHelper.Messages">
            <summary>
            Server messages if any, buffer is cleared after you access this property
            </summary>
        </member>
        <member name="P:LSLibraryS.FTPHelper.ResponseString">
            <summary>
            The response string from the last issued command
            </summary>
        </member>
        <member name="P:LSLibraryS.FTPHelper.BytesTotal">
            <summary>
            The total number of bytes sent/recieved in a transfer
            </summary>
        </member>
        <member name="P:LSLibraryS.FTPHelper.FileSize">
            <summary>
            The size of the file being downloaded/uploaded (Can possibly be 0 if no size is available)
            </summary>
        </member>
        <member name="P:LSLibraryS.FTPHelper.PassiveMode">
            <summary>
            True:  Passive mode [default]
            False: Active Mode
            </summary>
        </member>
        <member name="M:LSLibraryS.FTPHelper.Disconnect">
            <summary>
            Closes all connections to the ftp server
            </summary>
        </member>
        <member name="M:LSLibraryS.FTPHelper.Connect(System.String,System.Int32,System.String,System.String)">
            <summary>
            Connect to a ftp server
            </summary>
            <param name="server">IP or hostname of the server to connect to</param>
            <param name="port">Port number the server is listening on</param>
            <param name="user">Account name to login as</param>
            <param name="pass">Password for the account specified</param>
        </member>
        <member name="M:LSLibraryS.FTPHelper.Connect(System.String,System.String,System.String)">
            <summary>
            Connect to a ftp server
            </summary>
            <param name="server">IP or hostname of the server to connect to</param>
            <param name="user">Account name to login as</param>
            <param name="pass">Password for the account specified</param>
        </member>
        <member name="M:LSLibraryS.FTPHelper.Connect">
            <summary>
            Connect to an ftp server
            </summary>
        </member>
        <member name="M:LSLibraryS.FTPHelper.List">
            <summary>
            Retrieves a list of files from the ftp server
            </summary>
            <returns>An ArrayList of files</returns>
        </member>
        <member name="M:LSLibraryS.FTPHelper.ListFiles">
            <summary>
            Gets a file list only
            </summary>
            <returns>ArrayList of files only</returns>
        </member>
        <member name="M:LSLibraryS.FTPHelper.ListDirectories">
            <summary>
            Gets a directory list only
            </summary>
            <returns>ArrayList of directories only</returns>
        </member>
        <member name="M:LSLibraryS.FTPHelper.GetFileDateRaw(System.String)">
            <summary>
            Returns the 'Raw' DateInformation in ftp format. (YYYYMMDDhhmmss). Use GetFileDate to return a DateTime object as a better option.
            </summary>
            <param name="fileName">Remote FileName to Query</param>
            <returns>Returns the 'Raw' DateInformation in ftp format</returns>
        </member>
        <member name="M:LSLibraryS.FTPHelper.GetFileDate(System.String)">
            <summary>
            GetFileDate will query the ftp server for the date of the remote file.
            </summary>
            <param name="fileName">Remote FileName to Query</param>
            <returns>DateTime of the Input FileName</returns>
        </member>
        <member name="M:LSLibraryS.FTPHelper.GetWorkingDirectory">
            <summary>
            Get the working directory on the ftp server
            </summary>
            <returns>The working directory</returns>
        </member>
        <member name="M:LSLibraryS.FTPHelper.ChangeDir(System.String)">
            <summary>
            Change to another directory on the ftp server
            </summary>
            <param name="path">Directory to change to</param>
        </member>
        <member name="M:LSLibraryS.FTPHelper.MakeDir(System.String)">
            <summary>
            Create a directory on the ftp server
            </summary>
            <param name="dir">Directory to create</param>
        </member>
        <member name="M:LSLibraryS.FTPHelper.RemoveDir(System.String)">
            <summary>
            Remove a directory from the ftp server
            </summary>
            <param name="dir">Name of directory to remove</param>
        </member>
        <member name="M:LSLibraryS.FTPHelper.RemoveFile(System.String)">
            <summary>
            Remove a file from the ftp server
            </summary>
            <param name="filename">Name of the file to delete</param>
        </member>
        <member name="M:LSLibraryS.FTPHelper.RenameFile(System.String,System.String)">
            <summary>
            Rename a file on the ftp server
            </summary>
            <param name="oldfilename">Old file name</param>
            <param name="newfilename">New file name</param>
        </member>
        <member name="M:LSLibraryS.FTPHelper.GetFileSize(System.String)">
            <summary>
            Get the size of a file (Provided the ftp server supports it)
            </summary>
            <param name="filename">Name of file</param>
            <returns>The size of the file specified by filename</returns>
        </member>
        <member name="M:LSLibraryS.FTPHelper.OpenUpload(System.String)">
            <summary>
            Open an upload with no resume if it already exists
            </summary>
            <param name="filename">File to upload</param>
        </member>
        <member name="M:LSLibraryS.FTPHelper.OpenUpload(System.String,System.String)">
            <summary>
            Open an upload with no resume if it already exists
            </summary>
            <param name="filename">Local file to upload (Can include path to file)</param>
            <param name="remotefilename">Filename to store file as on ftp server</param>
        </member>
        <member name="M:LSLibraryS.FTPHelper.OpenUpload(System.String,System.Boolean)">
            <summary>
            Open an upload with resume support
            </summary>
            <param name="filename">Local file to upload (Can include path to file)</param>
            <param name="resume">Attempt resume if exists</param>
        </member>
        <member name="M:LSLibraryS.FTPHelper.OpenUpload(System.String,System.String,System.Boolean)">
            <summary>
            Open an upload with resume support
            </summary>
            <param name="filename">Local file to upload (Can include path to file)</param>
            <param name="remote_filename">Filename to store file as on ftp server</param>
            <param name="resume">Attempt resume if exists</param>
        </member>
        <member name="M:LSLibraryS.FTPHelper.OpenDownload(System.String)">
            <summary>
            Download a file with no resume
            </summary>
            <param name="filename">Remote file name</param>
        </member>
        <member name="M:LSLibraryS.FTPHelper.OpenDownload(System.String,System.Boolean)">
            <summary>
            Download a file with optional resume
            </summary>
            <param name="filename">Remote file name</param>
            <param name="resume">Attempt resume if file exists</param>
        </member>
        <member name="M:LSLibraryS.FTPHelper.OpenDownload(System.String,System.String)">
            <summary>
            Download a file with no attempt to resume
            </summary>
            <param name="filename">Remote filename</param>
            <param name="localfilename">Local filename (Can include path to file)</param>
        </member>
        <member name="M:LSLibraryS.FTPHelper.OpenDownload(System.String,System.String,System.Boolean)">
            <summary>
            Open a file for download
            </summary>
            <param name="remote_filename">The name of the file on the FTP server</param>
            <param name="local_filename">The name of the file to save as (Can include path to file)</param>
            <param name="resume">Attempt resume if file exists</param>
        </member>
        <member name="M:LSLibraryS.FTPHelper.DoUpload">
            <summary>
            Upload the file, to be used in a loop until file is completely uploaded
            </summary>
            <returns>Bytes sent</returns>
        </member>
        <member name="M:LSLibraryS.FTPHelper.DoDownload">
            <summary>
            Download a file, to be used in a loop until the file is completely downloaded
            </summary>
            <returns>Number of bytes recieved</returns>
        </member>
        <member name="T:LSLibraryS.ProxyHelper">
            <summary>
            IE代理设置辅助类
            </summary>
        </member>
        <member name="M:LSLibraryS.ProxyHelper.SetIESupportWap">
            <summary>
            让IE支持WAP
            </summary>
        </member>
        <member name="M:LSLibraryS.ProxyHelper.SetIEProxy(System.String,System.Int32)">
            <summary>
            设置代理
            </summary>
            <param name="ProxyServer"></param>
            <param name="EnableProxy"></param>
            <returns></returns>
        </member>
        <member name="M:LSLibraryS.ProxyHelper.TestProxy(LSLibraryS.ProxySettingEntity,LSLibraryS.TestEntity)">
            <summary>
            测试代理配置
            </summary>
            <param name="setting">代理信息</param>
        </member>
        <member name="M:LSLibraryS.ProxyHelper.SetProxySetting(System.Net.WebRequest,LSLibraryS.ProxySettingEntity)">
            <summary>
            代理设置
            </summary>
            <param name="request"></param>
        </member>
        <member name="P:LSLibraryS.TestEntity.TestUrl">
            <summary>
            测试网站地址
            </summary>
        </member>
        <member name="P:LSLibraryS.TestEntity.TestWebTitle">
            <summary>
            测试网站Title
            </summary>
        </member>
        <member name="T:LSLibraryS.ProxySettingEntity">
            <summary>
            代理设置
            </summary>
        </member>
        <member name="P:LSLibraryS.ProxySettingEntity.Ip">
            <summary>
            代理服务器IP
            </summary>
        </member>
        <member name="P:LSLibraryS.ProxySettingEntity.Port">
            <summary>
            代理服务器端口
            </summary>
        </member>
        <member name="P:LSLibraryS.ProxySettingEntity.UserName">
            <summary>
            代理用户名
            </summary>
        </member>
        <member name="P:LSLibraryS.ProxySettingEntity.Password">
            <summary>
            代理密码
            </summary>
        </member>
        <member name="T:WHC.OrderWater.Commons.HttpWebRequestHelper">
            <summary>
            网页抓取帮助
            </summary>
        </member>
        <member name="M:WHC.OrderWater.Commons.HttpWebRequestHelper.#ctor(System.Net.CookieContainer)">
            <summary>
            
            </summary>
            <param name="cookie"></param>
        </member>
        <member name="M:WHC.OrderWater.Commons.HttpWebRequestHelper.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:WHC.OrderWater.Commons.HttpWebRequestHelper.cookieContainer">
            <summary>
            cookie集合 
            </summary>
        </member>
        <member name="M:WHC.OrderWater.Commons.HttpWebRequestHelper.Get(System.String)">
            <summary>
            获取页面html   encodingname:gb2312
            </summary>
            <param name="uri">访问url</param>
            <returns></returns>
        </member>
        <member name="M:WHC.OrderWater.Commons.HttpWebRequestHelper.Get(System.String,System.String)">
            <summary>
            获取页面html   encodingname:gb2312
            </summary>
            <param name="uri">访问url</param>
            <param name="refererUri">来源url</param>
            <returns></returns>
        </member>
        <member name="M:WHC.OrderWater.Commons.HttpWebRequestHelper.Get(System.String,System.String,System.String)">
            <summary>
            获取页面html
            </summary>
            <param name="uri">访问url</param>
            <param name="refererUri">来源url</param>
            <param name="encodingName">编码名称  例如：gb2312</param>
            <returns></returns>
        </member>
        <member name="M:WHC.OrderWater.Commons.HttpWebRequestHelper.Get(System.String,System.String,System.String,System.Net.WebProxy)">
            <summary>
            获取页面html
            </summary>
            <param name="uri">访问url</param>
            <param name="refererUri">来源url</param>
            <param name="encodingName">编码名称  例如：gb2312</param>
            <param name="webproxy">代理</param>
            <returns></returns>
        </member>
        <member name="M:WHC.OrderWater.Commons.HttpWebRequestHelper.GetBytes(System.String)">
            <summary>
            获取文件或图片 （验证码）
            </summary>
            <param name="uri">访问url</param>
            <returns></returns>
        </member>
        <member name="M:WHC.OrderWater.Commons.HttpWebRequestHelper.GetBytes(System.String,System.String)">
            <summary>
            获取文件或图片 （验证码）
            </summary>
            <param name="uri">访问url</param>
            <param name="refererUri">来源url</param>
            <returns></returns>
        </member>
        <member name="M:WHC.OrderWater.Commons.HttpWebRequestHelper.GetBytes(System.String,System.String,System.Net.WebProxy)">
            <summary>
            获取文件或图片 （验证码）
            </summary>
            <param name="uri">访问url</param>
            <param name="refererUri">来源url</param>
            <returns></returns>
        </member>
        <member name="M:WHC.OrderWater.Commons.HttpWebRequestHelper.GetStream(System.String)">
            <summary>
            获取文件或图片 （验证码）
            </summary>
            <param name="uri">访问url</param>
            <returns></returns>
        </member>
        <member name="M:WHC.OrderWater.Commons.HttpWebRequestHelper.GetStream(System.String,System.String)">
            <summary>
            获取文件或图片 （验证码）
            </summary>
            <param name="uri">访问url</param>
            <param name="refererUri">来源url</param>
            <returns></returns>
        </member>
        <member name="M:WHC.OrderWater.Commons.HttpWebRequestHelper.GetStream(System.String,System.String,System.Net.WebProxy)">
            <summary>
            获取文件或图片 （验证码）
            </summary>
            <param name="uri">访问url</param>
            <param name="refererUri">来源url</param>
            <param name="webproxy">代理</param>
            <returns></returns>
        </member>
        <member name="M:WHC.OrderWater.Commons.HttpWebRequestHelper.Post(System.String,System.String)">
            <summary>
            POST提交   模拟xp IE7.0     默认GB2312
            </summary>
            <param name="uri">访问url</param>
            <param name="postData">提交的数据</param>
            <returns></returns>
        </member>
        <member name="M:WHC.OrderWater.Commons.HttpWebRequestHelper.Post(System.String,System.String,System.String)">
            <summary>
            POST提交   模拟xp IE7.0     默认GB2312
            </summary>
            <param name="uri">访问url</param>
            <param name="refererUri">来源url</param>
            <param name="postData">提交的数据</param>
            <returns></returns>
        </member>
        <member name="M:WHC.OrderWater.Commons.HttpWebRequestHelper.Post(System.String,System.String,System.String,System.String)">
            <summary>
            POST提交    模拟xp IE7.0
            </summary>
            <param name="uri">访问url</param>
            <param name="refererUri">来源url</param>
            <param name="postData">提交的数据</param>
            <param name="encodingName">编码名称  例如：gb2312</param>
            <returns></returns>
        </member>
        <member name="M:WHC.OrderWater.Commons.HttpWebRequestHelper.Post(System.String,System.String,System.String,System.String,System.Net.WebProxy)">
            <summary>
            POST提交    模拟xp IE7.0
            </summary>
            <param name="uri">访问url</param>
            <param name="refererUri">来源url</param>
            <param name="postData">提交的数据</param>
            <param name="encodingName">编码名称  例如：gb2312</param>
            <param name="webproxy">代理</param>
            <returns></returns>
        </member>
    </members>
</doc>
